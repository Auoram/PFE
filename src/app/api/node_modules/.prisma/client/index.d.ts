
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Parent
 * 
 */
export type Parent = $Result.DefaultSelection<Prisma.$ParentPayload>
/**
 * Model CentreVax
 * 
 */
export type CentreVax = $Result.DefaultSelection<Prisma.$CentreVaxPayload>
/**
 * Model PersonnelMedical
 * 
 */
export type PersonnelMedical = $Result.DefaultSelection<Prisma.$PersonnelMedicalPayload>
/**
 * Model Enfant
 * 
 */
export type Enfant = $Result.DefaultSelection<Prisma.$EnfantPayload>
/**
 * Model Vaccin
 * 
 */
export type Vaccin = $Result.DefaultSelection<Prisma.$VaccinPayload>
/**
 * Model RendezVous
 * 
 */
export type RendezVous = $Result.DefaultSelection<Prisma.$RendezVousPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.parent`: Exposes CRUD operations for the **Parent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parents
    * const parents = await prisma.parent.findMany()
    * ```
    */
  get parent(): Prisma.ParentDelegate<ExtArgs>;

  /**
   * `prisma.centreVax`: Exposes CRUD operations for the **CentreVax** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CentreVaxes
    * const centreVaxes = await prisma.centreVax.findMany()
    * ```
    */
  get centreVax(): Prisma.CentreVaxDelegate<ExtArgs>;

  /**
   * `prisma.personnelMedical`: Exposes CRUD operations for the **PersonnelMedical** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonnelMedicals
    * const personnelMedicals = await prisma.personnelMedical.findMany()
    * ```
    */
  get personnelMedical(): Prisma.PersonnelMedicalDelegate<ExtArgs>;

  /**
   * `prisma.enfant`: Exposes CRUD operations for the **Enfant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enfants
    * const enfants = await prisma.enfant.findMany()
    * ```
    */
  get enfant(): Prisma.EnfantDelegate<ExtArgs>;

  /**
   * `prisma.vaccin`: Exposes CRUD operations for the **Vaccin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vaccins
    * const vaccins = await prisma.vaccin.findMany()
    * ```
    */
  get vaccin(): Prisma.VaccinDelegate<ExtArgs>;

  /**
   * `prisma.rendezVous`: Exposes CRUD operations for the **RendezVous** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RendezVous
    * const rendezVous = await prisma.rendezVous.findMany()
    * ```
    */
  get rendezVous(): Prisma.RendezVousDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Parent: 'Parent',
    CentreVax: 'CentreVax',
    PersonnelMedical: 'PersonnelMedical',
    Enfant: 'Enfant',
    Vaccin: 'Vaccin',
    RendezVous: 'RendezVous'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'parent' | 'centreVax' | 'personnelMedical' | 'enfant' | 'vaccin' | 'rendezVous'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Parent: {
        payload: Prisma.$ParentPayload<ExtArgs>
        fields: Prisma.ParentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findFirst: {
            args: Prisma.ParentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findMany: {
            args: Prisma.ParentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          create: {
            args: Prisma.ParentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          createMany: {
            args: Prisma.ParentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          update: {
            args: Prisma.ParentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          deleteMany: {
            args: Prisma.ParentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          aggregate: {
            args: Prisma.ParentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParent>
          }
          groupBy: {
            args: Prisma.ParentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentCountArgs<ExtArgs>,
            result: $Utils.Optional<ParentCountAggregateOutputType> | number
          }
        }
      }
      CentreVax: {
        payload: Prisma.$CentreVaxPayload<ExtArgs>
        fields: Prisma.CentreVaxFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CentreVaxFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CentreVaxFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          findFirst: {
            args: Prisma.CentreVaxFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CentreVaxFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          findMany: {
            args: Prisma.CentreVaxFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>[]
          }
          create: {
            args: Prisma.CentreVaxCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          createMany: {
            args: Prisma.CentreVaxCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CentreVaxDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          update: {
            args: Prisma.CentreVaxUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          deleteMany: {
            args: Prisma.CentreVaxDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CentreVaxUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CentreVaxUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CentreVaxPayload>
          }
          aggregate: {
            args: Prisma.CentreVaxAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCentreVax>
          }
          groupBy: {
            args: Prisma.CentreVaxGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CentreVaxGroupByOutputType>[]
          }
          count: {
            args: Prisma.CentreVaxCountArgs<ExtArgs>,
            result: $Utils.Optional<CentreVaxCountAggregateOutputType> | number
          }
        }
      }
      PersonnelMedical: {
        payload: Prisma.$PersonnelMedicalPayload<ExtArgs>
        fields: Prisma.PersonnelMedicalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonnelMedicalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonnelMedicalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          findFirst: {
            args: Prisma.PersonnelMedicalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonnelMedicalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          findMany: {
            args: Prisma.PersonnelMedicalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>[]
          }
          create: {
            args: Prisma.PersonnelMedicalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          createMany: {
            args: Prisma.PersonnelMedicalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PersonnelMedicalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          update: {
            args: Prisma.PersonnelMedicalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          deleteMany: {
            args: Prisma.PersonnelMedicalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonnelMedicalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonnelMedicalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonnelMedicalPayload>
          }
          aggregate: {
            args: Prisma.PersonnelMedicalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePersonnelMedical>
          }
          groupBy: {
            args: Prisma.PersonnelMedicalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonnelMedicalGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonnelMedicalCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonnelMedicalCountAggregateOutputType> | number
          }
        }
      }
      Enfant: {
        payload: Prisma.$EnfantPayload<ExtArgs>
        fields: Prisma.EnfantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnfantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnfantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          findFirst: {
            args: Prisma.EnfantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnfantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          findMany: {
            args: Prisma.EnfantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>[]
          }
          create: {
            args: Prisma.EnfantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          createMany: {
            args: Prisma.EnfantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EnfantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          update: {
            args: Prisma.EnfantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          deleteMany: {
            args: Prisma.EnfantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EnfantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EnfantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnfantPayload>
          }
          aggregate: {
            args: Prisma.EnfantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEnfant>
          }
          groupBy: {
            args: Prisma.EnfantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EnfantGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnfantCountArgs<ExtArgs>,
            result: $Utils.Optional<EnfantCountAggregateOutputType> | number
          }
        }
      }
      Vaccin: {
        payload: Prisma.$VaccinPayload<ExtArgs>
        fields: Prisma.VaccinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VaccinFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VaccinFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          findFirst: {
            args: Prisma.VaccinFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VaccinFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          findMany: {
            args: Prisma.VaccinFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>[]
          }
          create: {
            args: Prisma.VaccinCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          createMany: {
            args: Prisma.VaccinCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VaccinDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          update: {
            args: Prisma.VaccinUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          deleteMany: {
            args: Prisma.VaccinDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VaccinUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VaccinUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VaccinPayload>
          }
          aggregate: {
            args: Prisma.VaccinAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVaccin>
          }
          groupBy: {
            args: Prisma.VaccinGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VaccinGroupByOutputType>[]
          }
          count: {
            args: Prisma.VaccinCountArgs<ExtArgs>,
            result: $Utils.Optional<VaccinCountAggregateOutputType> | number
          }
        }
      }
      RendezVous: {
        payload: Prisma.$RendezVousPayload<ExtArgs>
        fields: Prisma.RendezVousFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RendezVousFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RendezVousFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          findFirst: {
            args: Prisma.RendezVousFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RendezVousFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          findMany: {
            args: Prisma.RendezVousFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>[]
          }
          create: {
            args: Prisma.RendezVousCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          createMany: {
            args: Prisma.RendezVousCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RendezVousDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          update: {
            args: Prisma.RendezVousUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          deleteMany: {
            args: Prisma.RendezVousDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RendezVousUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RendezVousUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RendezVousPayload>
          }
          aggregate: {
            args: Prisma.RendezVousAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRendezVous>
          }
          groupBy: {
            args: Prisma.RendezVousGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RendezVousGroupByOutputType>[]
          }
          count: {
            args: Prisma.RendezVousCountArgs<ExtArgs>,
            result: $Utils.Optional<RendezVousCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Parent: number
    personnelsMedical: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Parent?: boolean | UserCountOutputTypeCountParentArgs
    personnelsMedical?: boolean | UserCountOutputTypeCountPersonnelsMedicalArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPersonnelsMedicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonnelMedicalWhereInput
  }


  /**
   * Count Type ParentCountOutputType
   */

  export type ParentCountOutputType = {
    enfants: number
    rendezVous: number
  }

  export type ParentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enfants?: boolean | ParentCountOutputTypeCountEnfantsArgs
    rendezVous?: boolean | ParentCountOutputTypeCountRendezVousArgs
  }

  // Custom InputTypes
  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentCountOutputType
     */
    select?: ParentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeCountEnfantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnfantWhereInput
  }

  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeCountRendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RendezVousWhereInput
  }


  /**
   * Count Type CentreVaxCountOutputType
   */

  export type CentreVaxCountOutputType = {
    personnelsMedical: number
    enfants: number
    rendezVous: number
  }

  export type CentreVaxCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnelsMedical?: boolean | CentreVaxCountOutputTypeCountPersonnelsMedicalArgs
    enfants?: boolean | CentreVaxCountOutputTypeCountEnfantsArgs
    rendezVous?: boolean | CentreVaxCountOutputTypeCountRendezVousArgs
  }

  // Custom InputTypes
  /**
   * CentreVaxCountOutputType without action
   */
  export type CentreVaxCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVaxCountOutputType
     */
    select?: CentreVaxCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CentreVaxCountOutputType without action
   */
  export type CentreVaxCountOutputTypeCountPersonnelsMedicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonnelMedicalWhereInput
  }

  /**
   * CentreVaxCountOutputType without action
   */
  export type CentreVaxCountOutputTypeCountEnfantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnfantWhereInput
  }

  /**
   * CentreVaxCountOutputType without action
   */
  export type CentreVaxCountOutputTypeCountRendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RendezVousWhereInput
  }


  /**
   * Count Type EnfantCountOutputType
   */

  export type EnfantCountOutputType = {
    vaccins: number
  }

  export type EnfantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vaccins?: boolean | EnfantCountOutputTypeCountVaccinsArgs
  }

  // Custom InputTypes
  /**
   * EnfantCountOutputType without action
   */
  export type EnfantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnfantCountOutputType
     */
    select?: EnfantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnfantCountOutputType without action
   */
  export type EnfantCountOutputTypeCountVaccinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VaccinWhereInput
  }


  /**
   * Count Type VaccinCountOutputType
   */

  export type VaccinCountOutputType = {
    rendezVous: number
  }

  export type VaccinCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rendezVous?: boolean | VaccinCountOutputTypeCountRendezVousArgs
  }

  // Custom InputTypes
  /**
   * VaccinCountOutputType without action
   */
  export type VaccinCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VaccinCountOutputType
     */
    select?: VaccinCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VaccinCountOutputType without action
   */
  export type VaccinCountOutputTypeCountRendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RendezVousWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    Parent?: boolean | User$ParentArgs<ExtArgs>
    personnelsMedical?: boolean | User$personnelsMedicalArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Parent?: boolean | User$ParentArgs<ExtArgs>
    personnelsMedical?: boolean | User$personnelsMedicalArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Parent: Prisma.$ParentPayload<ExtArgs>[]
      personnelsMedical: Prisma.$PersonnelMedicalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Parent<T extends User$ParentArgs<ExtArgs> = {}>(args?: Subset<T, User$ParentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findMany'> | Null>;

    personnelsMedical<T extends User$personnelsMedicalArgs<ExtArgs> = {}>(args?: Subset<T, User$personnelsMedicalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.Parent
   */
  export type User$ParentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    where?: ParentWhereInput
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    cursor?: ParentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * User.personnelsMedical
   */
  export type User$personnelsMedicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    where?: PersonnelMedicalWhereInput
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    cursor?: PersonnelMedicalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonnelMedicalScalarFieldEnum | PersonnelMedicalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Parent
   */

  export type AggregateParent = {
    _count: ParentCountAggregateOutputType | null
    _avg: ParentAvgAggregateOutputType | null
    _sum: ParentSumAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  export type ParentAvgAggregateOutputType = {
    idP: number | null
    user_id: number | null
  }

  export type ParentSumAggregateOutputType = {
    idP: number | null
    user_id: number | null
  }

  export type ParentMinAggregateOutputType = {
    idP: number | null
    user_id: number | null
    nomP: string | null
    prenomP: string | null
    numTelP: string | null
    roleP: string | null
    sexeP: string | null
  }

  export type ParentMaxAggregateOutputType = {
    idP: number | null
    user_id: number | null
    nomP: string | null
    prenomP: string | null
    numTelP: string | null
    roleP: string | null
    sexeP: string | null
  }

  export type ParentCountAggregateOutputType = {
    idP: number
    user_id: number
    nomP: number
    prenomP: number
    numTelP: number
    roleP: number
    sexeP: number
    _all: number
  }


  export type ParentAvgAggregateInputType = {
    idP?: true
    user_id?: true
  }

  export type ParentSumAggregateInputType = {
    idP?: true
    user_id?: true
  }

  export type ParentMinAggregateInputType = {
    idP?: true
    user_id?: true
    nomP?: true
    prenomP?: true
    numTelP?: true
    roleP?: true
    sexeP?: true
  }

  export type ParentMaxAggregateInputType = {
    idP?: true
    user_id?: true
    nomP?: true
    prenomP?: true
    numTelP?: true
    roleP?: true
    sexeP?: true
  }

  export type ParentCountAggregateInputType = {
    idP?: true
    user_id?: true
    nomP?: true
    prenomP?: true
    numTelP?: true
    roleP?: true
    sexeP?: true
    _all?: true
  }

  export type ParentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parent to aggregate.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parents
    **/
    _count?: true | ParentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentMaxAggregateInputType
  }

  export type GetParentAggregateType<T extends ParentAggregateArgs> = {
        [P in keyof T & keyof AggregateParent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParent[P]>
      : GetScalarType<T[P], AggregateParent[P]>
  }




  export type ParentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentWhereInput
    orderBy?: ParentOrderByWithAggregationInput | ParentOrderByWithAggregationInput[]
    by: ParentScalarFieldEnum[] | ParentScalarFieldEnum
    having?: ParentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentCountAggregateInputType | true
    _avg?: ParentAvgAggregateInputType
    _sum?: ParentSumAggregateInputType
    _min?: ParentMinAggregateInputType
    _max?: ParentMaxAggregateInputType
  }

  export type ParentGroupByOutputType = {
    idP: number
    user_id: number
    nomP: string | null
    prenomP: string | null
    numTelP: string | null
    roleP: string | null
    sexeP: string
    _count: ParentCountAggregateOutputType | null
    _avg: ParentAvgAggregateOutputType | null
    _sum: ParentSumAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  type GetParentGroupByPayload<T extends ParentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentGroupByOutputType[P]>
            : GetScalarType<T[P], ParentGroupByOutputType[P]>
        }
      >
    >


  export type ParentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idP?: boolean
    user_id?: boolean
    nomP?: boolean
    prenomP?: boolean
    numTelP?: boolean
    roleP?: boolean
    sexeP?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    enfants?: boolean | Parent$enfantsArgs<ExtArgs>
    rendezVous?: boolean | Parent$rendezVousArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectScalar = {
    idP?: boolean
    user_id?: boolean
    nomP?: boolean
    prenomP?: boolean
    numTelP?: boolean
    roleP?: boolean
    sexeP?: boolean
  }


  export type ParentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    enfants?: boolean | Parent$enfantsArgs<ExtArgs>
    rendezVous?: boolean | Parent$rendezVousArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ParentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      enfants: Prisma.$EnfantPayload<ExtArgs>[]
      rendezVous: Prisma.$RendezVousPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idP: number
      user_id: number
      nomP: string | null
      prenomP: string | null
      numTelP: string | null
      roleP: string | null
      sexeP: string
    }, ExtArgs["result"]["parent"]>
    composites: {}
  }


  type ParentGetPayload<S extends boolean | null | undefined | ParentDefaultArgs> = $Result.GetResult<Prisma.$ParentPayload, S>

  type ParentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParentCountAggregateInputType | true
    }

  export interface ParentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parent'], meta: { name: 'Parent' } }
    /**
     * Find zero or one Parent that matches the filter.
     * @param {ParentFindUniqueArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParentFindUniqueArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Parent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParentFindUniqueOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Parent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentFindFirstArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Parent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Parents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parents
     * const parents = await prisma.parent.findMany()
     * 
     * // Get first 10 Parents
     * const parents = await prisma.parent.findMany({ take: 10 })
     * 
     * // Only select the `idP`
     * const parentWithIdPOnly = await prisma.parent.findMany({ select: { idP: true } })
     * 
    **/
    findMany<T extends ParentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Parent.
     * @param {ParentCreateArgs} args - Arguments to create a Parent.
     * @example
     * // Create one Parent
     * const Parent = await prisma.parent.create({
     *   data: {
     *     // ... data to create a Parent
     *   }
     * })
     * 
    **/
    create<T extends ParentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParentCreateArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Parents.
     *     @param {ParentCreateManyArgs} args - Arguments to create many Parents.
     *     @example
     *     // Create many Parents
     *     const parent = await prisma.parent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Parent.
     * @param {ParentDeleteArgs} args - Arguments to delete one Parent.
     * @example
     * // Delete one Parent
     * const Parent = await prisma.parent.delete({
     *   where: {
     *     // ... filter to delete one Parent
     *   }
     * })
     * 
    **/
    delete<T extends ParentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParentDeleteArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Parent.
     * @param {ParentUpdateArgs} args - Arguments to update one Parent.
     * @example
     * // Update one Parent
     * const parent = await prisma.parent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParentUpdateArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Parents.
     * @param {ParentDeleteManyArgs} args - Arguments to filter Parents to delete.
     * @example
     * // Delete a few Parents
     * const { count } = await prisma.parent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parents
     * const parent = await prisma.parent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parent.
     * @param {ParentUpsertArgs} args - Arguments to update or create a Parent.
     * @example
     * // Update or create a Parent
     * const parent = await prisma.parent.upsert({
     *   create: {
     *     // ... data to create a Parent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parent we want to update
     *   }
     * })
    **/
    upsert<T extends ParentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParentUpsertArgs<ExtArgs>>
    ): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentCountArgs} args - Arguments to filter Parents to count.
     * @example
     * // Count the number of Parents
     * const count = await prisma.parent.count({
     *   where: {
     *     // ... the filter for the Parents we want to count
     *   }
     * })
    **/
    count<T extends ParentCountArgs>(
      args?: Subset<T, ParentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentAggregateArgs>(args: Subset<T, ParentAggregateArgs>): Prisma.PrismaPromise<GetParentAggregateType<T>>

    /**
     * Group by Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentGroupByArgs['orderBy'] }
        : { orderBy?: ParentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parent model
   */
  readonly fields: ParentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    enfants<T extends Parent$enfantsArgs<ExtArgs> = {}>(args?: Subset<T, Parent$enfantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findMany'> | Null>;

    rendezVous<T extends Parent$rendezVousArgs<ExtArgs> = {}>(args?: Subset<T, Parent$rendezVousArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Parent model
   */ 
  interface ParentFieldRefs {
    readonly idP: FieldRef<"Parent", 'Int'>
    readonly user_id: FieldRef<"Parent", 'Int'>
    readonly nomP: FieldRef<"Parent", 'String'>
    readonly prenomP: FieldRef<"Parent", 'String'>
    readonly numTelP: FieldRef<"Parent", 'String'>
    readonly roleP: FieldRef<"Parent", 'String'>
    readonly sexeP: FieldRef<"Parent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Parent findUnique
   */
  export type ParentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findUniqueOrThrow
   */
  export type ParentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findFirst
   */
  export type ParentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findFirstOrThrow
   */
  export type ParentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findMany
   */
  export type ParentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parents to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent create
   */
  export type ParentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to create a Parent.
     */
    data: XOR<ParentCreateInput, ParentUncheckedCreateInput>
  }

  /**
   * Parent createMany
   */
  export type ParentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parents.
     */
    data: ParentCreateManyInput | ParentCreateManyInput[]
  }

  /**
   * Parent update
   */
  export type ParentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to update a Parent.
     */
    data: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
    /**
     * Choose, which Parent to update.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent updateMany
   */
  export type ParentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parents.
     */
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyInput>
    /**
     * Filter which Parents to update
     */
    where?: ParentWhereInput
  }

  /**
   * Parent upsert
   */
  export type ParentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The filter to search for the Parent to update in case it exists.
     */
    where: ParentWhereUniqueInput
    /**
     * In case the Parent found by the `where` argument doesn't exist, create a new Parent with this data.
     */
    create: XOR<ParentCreateInput, ParentUncheckedCreateInput>
    /**
     * In case the Parent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
  }

  /**
   * Parent delete
   */
  export type ParentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter which Parent to delete.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent deleteMany
   */
  export type ParentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parents to delete
     */
    where?: ParentWhereInput
  }

  /**
   * Parent.enfants
   */
  export type Parent$enfantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    where?: EnfantWhereInput
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    cursor?: EnfantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnfantScalarFieldEnum | EnfantScalarFieldEnum[]
  }

  /**
   * Parent.rendezVous
   */
  export type Parent$rendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    where?: RendezVousWhereInput
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    cursor?: RendezVousWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * Parent without action
   */
  export type ParentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
  }


  /**
   * Model CentreVax
   */

  export type AggregateCentreVax = {
    _count: CentreVaxCountAggregateOutputType | null
    _avg: CentreVaxAvgAggregateOutputType | null
    _sum: CentreVaxSumAggregateOutputType | null
    _min: CentreVaxMinAggregateOutputType | null
    _max: CentreVaxMaxAggregateOutputType | null
  }

  export type CentreVaxAvgAggregateOutputType = {
    idC: number | null
    numTel: number | null
  }

  export type CentreVaxSumAggregateOutputType = {
    idC: number | null
    numTel: number | null
  }

  export type CentreVaxMinAggregateOutputType = {
    idC: number | null
    nomC: string | null
    adresseC: string | null
    numTel: number | null
  }

  export type CentreVaxMaxAggregateOutputType = {
    idC: number | null
    nomC: string | null
    adresseC: string | null
    numTel: number | null
  }

  export type CentreVaxCountAggregateOutputType = {
    idC: number
    nomC: number
    adresseC: number
    numTel: number
    _all: number
  }


  export type CentreVaxAvgAggregateInputType = {
    idC?: true
    numTel?: true
  }

  export type CentreVaxSumAggregateInputType = {
    idC?: true
    numTel?: true
  }

  export type CentreVaxMinAggregateInputType = {
    idC?: true
    nomC?: true
    adresseC?: true
    numTel?: true
  }

  export type CentreVaxMaxAggregateInputType = {
    idC?: true
    nomC?: true
    adresseC?: true
    numTel?: true
  }

  export type CentreVaxCountAggregateInputType = {
    idC?: true
    nomC?: true
    adresseC?: true
    numTel?: true
    _all?: true
  }

  export type CentreVaxAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CentreVax to aggregate.
     */
    where?: CentreVaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CentreVaxes to fetch.
     */
    orderBy?: CentreVaxOrderByWithRelationInput | CentreVaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CentreVaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CentreVaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CentreVaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CentreVaxes
    **/
    _count?: true | CentreVaxCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CentreVaxAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CentreVaxSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CentreVaxMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CentreVaxMaxAggregateInputType
  }

  export type GetCentreVaxAggregateType<T extends CentreVaxAggregateArgs> = {
        [P in keyof T & keyof AggregateCentreVax]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCentreVax[P]>
      : GetScalarType<T[P], AggregateCentreVax[P]>
  }




  export type CentreVaxGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CentreVaxWhereInput
    orderBy?: CentreVaxOrderByWithAggregationInput | CentreVaxOrderByWithAggregationInput[]
    by: CentreVaxScalarFieldEnum[] | CentreVaxScalarFieldEnum
    having?: CentreVaxScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CentreVaxCountAggregateInputType | true
    _avg?: CentreVaxAvgAggregateInputType
    _sum?: CentreVaxSumAggregateInputType
    _min?: CentreVaxMinAggregateInputType
    _max?: CentreVaxMaxAggregateInputType
  }

  export type CentreVaxGroupByOutputType = {
    idC: number
    nomC: string | null
    adresseC: string | null
    numTel: number | null
    _count: CentreVaxCountAggregateOutputType | null
    _avg: CentreVaxAvgAggregateOutputType | null
    _sum: CentreVaxSumAggregateOutputType | null
    _min: CentreVaxMinAggregateOutputType | null
    _max: CentreVaxMaxAggregateOutputType | null
  }

  type GetCentreVaxGroupByPayload<T extends CentreVaxGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CentreVaxGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CentreVaxGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CentreVaxGroupByOutputType[P]>
            : GetScalarType<T[P], CentreVaxGroupByOutputType[P]>
        }
      >
    >


  export type CentreVaxSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idC?: boolean
    nomC?: boolean
    adresseC?: boolean
    numTel?: boolean
    personnelsMedical?: boolean | CentreVax$personnelsMedicalArgs<ExtArgs>
    enfants?: boolean | CentreVax$enfantsArgs<ExtArgs>
    rendezVous?: boolean | CentreVax$rendezVousArgs<ExtArgs>
    _count?: boolean | CentreVaxCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["centreVax"]>

  export type CentreVaxSelectScalar = {
    idC?: boolean
    nomC?: boolean
    adresseC?: boolean
    numTel?: boolean
  }


  export type CentreVaxInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnelsMedical?: boolean | CentreVax$personnelsMedicalArgs<ExtArgs>
    enfants?: boolean | CentreVax$enfantsArgs<ExtArgs>
    rendezVous?: boolean | CentreVax$rendezVousArgs<ExtArgs>
    _count?: boolean | CentreVaxCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CentreVaxPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CentreVax"
    objects: {
      personnelsMedical: Prisma.$PersonnelMedicalPayload<ExtArgs>[]
      enfants: Prisma.$EnfantPayload<ExtArgs>[]
      rendezVous: Prisma.$RendezVousPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idC: number
      nomC: string | null
      adresseC: string | null
      numTel: number | null
    }, ExtArgs["result"]["centreVax"]>
    composites: {}
  }


  type CentreVaxGetPayload<S extends boolean | null | undefined | CentreVaxDefaultArgs> = $Result.GetResult<Prisma.$CentreVaxPayload, S>

  type CentreVaxCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CentreVaxFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CentreVaxCountAggregateInputType | true
    }

  export interface CentreVaxDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CentreVax'], meta: { name: 'CentreVax' } }
    /**
     * Find zero or one CentreVax that matches the filter.
     * @param {CentreVaxFindUniqueArgs} args - Arguments to find a CentreVax
     * @example
     * // Get one CentreVax
     * const centreVax = await prisma.centreVax.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CentreVaxFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxFindUniqueArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CentreVax that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CentreVaxFindUniqueOrThrowArgs} args - Arguments to find a CentreVax
     * @example
     * // Get one CentreVax
     * const centreVax = await prisma.centreVax.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CentreVaxFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CentreVax that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxFindFirstArgs} args - Arguments to find a CentreVax
     * @example
     * // Get one CentreVax
     * const centreVax = await prisma.centreVax.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CentreVaxFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxFindFirstArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CentreVax that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxFindFirstOrThrowArgs} args - Arguments to find a CentreVax
     * @example
     * // Get one CentreVax
     * const centreVax = await prisma.centreVax.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CentreVaxFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CentreVaxes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CentreVaxes
     * const centreVaxes = await prisma.centreVax.findMany()
     * 
     * // Get first 10 CentreVaxes
     * const centreVaxes = await prisma.centreVax.findMany({ take: 10 })
     * 
     * // Only select the `idC`
     * const centreVaxWithIdCOnly = await prisma.centreVax.findMany({ select: { idC: true } })
     * 
    **/
    findMany<T extends CentreVaxFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CentreVax.
     * @param {CentreVaxCreateArgs} args - Arguments to create a CentreVax.
     * @example
     * // Create one CentreVax
     * const CentreVax = await prisma.centreVax.create({
     *   data: {
     *     // ... data to create a CentreVax
     *   }
     * })
     * 
    **/
    create<T extends CentreVaxCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxCreateArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CentreVaxes.
     *     @param {CentreVaxCreateManyArgs} args - Arguments to create many CentreVaxes.
     *     @example
     *     // Create many CentreVaxes
     *     const centreVax = await prisma.centreVax.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CentreVaxCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CentreVax.
     * @param {CentreVaxDeleteArgs} args - Arguments to delete one CentreVax.
     * @example
     * // Delete one CentreVax
     * const CentreVax = await prisma.centreVax.delete({
     *   where: {
     *     // ... filter to delete one CentreVax
     *   }
     * })
     * 
    **/
    delete<T extends CentreVaxDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxDeleteArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CentreVax.
     * @param {CentreVaxUpdateArgs} args - Arguments to update one CentreVax.
     * @example
     * // Update one CentreVax
     * const centreVax = await prisma.centreVax.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CentreVaxUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxUpdateArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CentreVaxes.
     * @param {CentreVaxDeleteManyArgs} args - Arguments to filter CentreVaxes to delete.
     * @example
     * // Delete a few CentreVaxes
     * const { count } = await prisma.centreVax.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CentreVaxDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CentreVaxDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CentreVaxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CentreVaxes
     * const centreVax = await prisma.centreVax.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CentreVaxUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CentreVax.
     * @param {CentreVaxUpsertArgs} args - Arguments to update or create a CentreVax.
     * @example
     * // Update or create a CentreVax
     * const centreVax = await prisma.centreVax.upsert({
     *   create: {
     *     // ... data to create a CentreVax
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CentreVax we want to update
     *   }
     * })
    **/
    upsert<T extends CentreVaxUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CentreVaxUpsertArgs<ExtArgs>>
    ): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CentreVaxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxCountArgs} args - Arguments to filter CentreVaxes to count.
     * @example
     * // Count the number of CentreVaxes
     * const count = await prisma.centreVax.count({
     *   where: {
     *     // ... the filter for the CentreVaxes we want to count
     *   }
     * })
    **/
    count<T extends CentreVaxCountArgs>(
      args?: Subset<T, CentreVaxCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CentreVaxCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CentreVax.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CentreVaxAggregateArgs>(args: Subset<T, CentreVaxAggregateArgs>): Prisma.PrismaPromise<GetCentreVaxAggregateType<T>>

    /**
     * Group by CentreVax.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreVaxGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CentreVaxGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CentreVaxGroupByArgs['orderBy'] }
        : { orderBy?: CentreVaxGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CentreVaxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCentreVaxGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CentreVax model
   */
  readonly fields: CentreVaxFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CentreVax.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CentreVaxClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    personnelsMedical<T extends CentreVax$personnelsMedicalArgs<ExtArgs> = {}>(args?: Subset<T, CentreVax$personnelsMedicalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findMany'> | Null>;

    enfants<T extends CentreVax$enfantsArgs<ExtArgs> = {}>(args?: Subset<T, CentreVax$enfantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findMany'> | Null>;

    rendezVous<T extends CentreVax$rendezVousArgs<ExtArgs> = {}>(args?: Subset<T, CentreVax$rendezVousArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CentreVax model
   */ 
  interface CentreVaxFieldRefs {
    readonly idC: FieldRef<"CentreVax", 'Int'>
    readonly nomC: FieldRef<"CentreVax", 'String'>
    readonly adresseC: FieldRef<"CentreVax", 'String'>
    readonly numTel: FieldRef<"CentreVax", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CentreVax findUnique
   */
  export type CentreVaxFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter, which CentreVax to fetch.
     */
    where: CentreVaxWhereUniqueInput
  }

  /**
   * CentreVax findUniqueOrThrow
   */
  export type CentreVaxFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter, which CentreVax to fetch.
     */
    where: CentreVaxWhereUniqueInput
  }

  /**
   * CentreVax findFirst
   */
  export type CentreVaxFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter, which CentreVax to fetch.
     */
    where?: CentreVaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CentreVaxes to fetch.
     */
    orderBy?: CentreVaxOrderByWithRelationInput | CentreVaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CentreVaxes.
     */
    cursor?: CentreVaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CentreVaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CentreVaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CentreVaxes.
     */
    distinct?: CentreVaxScalarFieldEnum | CentreVaxScalarFieldEnum[]
  }

  /**
   * CentreVax findFirstOrThrow
   */
  export type CentreVaxFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter, which CentreVax to fetch.
     */
    where?: CentreVaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CentreVaxes to fetch.
     */
    orderBy?: CentreVaxOrderByWithRelationInput | CentreVaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CentreVaxes.
     */
    cursor?: CentreVaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CentreVaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CentreVaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CentreVaxes.
     */
    distinct?: CentreVaxScalarFieldEnum | CentreVaxScalarFieldEnum[]
  }

  /**
   * CentreVax findMany
   */
  export type CentreVaxFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter, which CentreVaxes to fetch.
     */
    where?: CentreVaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CentreVaxes to fetch.
     */
    orderBy?: CentreVaxOrderByWithRelationInput | CentreVaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CentreVaxes.
     */
    cursor?: CentreVaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CentreVaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CentreVaxes.
     */
    skip?: number
    distinct?: CentreVaxScalarFieldEnum | CentreVaxScalarFieldEnum[]
  }

  /**
   * CentreVax create
   */
  export type CentreVaxCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * The data needed to create a CentreVax.
     */
    data?: XOR<CentreVaxCreateInput, CentreVaxUncheckedCreateInput>
  }

  /**
   * CentreVax createMany
   */
  export type CentreVaxCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CentreVaxes.
     */
    data: CentreVaxCreateManyInput | CentreVaxCreateManyInput[]
  }

  /**
   * CentreVax update
   */
  export type CentreVaxUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * The data needed to update a CentreVax.
     */
    data: XOR<CentreVaxUpdateInput, CentreVaxUncheckedUpdateInput>
    /**
     * Choose, which CentreVax to update.
     */
    where: CentreVaxWhereUniqueInput
  }

  /**
   * CentreVax updateMany
   */
  export type CentreVaxUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CentreVaxes.
     */
    data: XOR<CentreVaxUpdateManyMutationInput, CentreVaxUncheckedUpdateManyInput>
    /**
     * Filter which CentreVaxes to update
     */
    where?: CentreVaxWhereInput
  }

  /**
   * CentreVax upsert
   */
  export type CentreVaxUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * The filter to search for the CentreVax to update in case it exists.
     */
    where: CentreVaxWhereUniqueInput
    /**
     * In case the CentreVax found by the `where` argument doesn't exist, create a new CentreVax with this data.
     */
    create: XOR<CentreVaxCreateInput, CentreVaxUncheckedCreateInput>
    /**
     * In case the CentreVax was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CentreVaxUpdateInput, CentreVaxUncheckedUpdateInput>
  }

  /**
   * CentreVax delete
   */
  export type CentreVaxDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
    /**
     * Filter which CentreVax to delete.
     */
    where: CentreVaxWhereUniqueInput
  }

  /**
   * CentreVax deleteMany
   */
  export type CentreVaxDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CentreVaxes to delete
     */
    where?: CentreVaxWhereInput
  }

  /**
   * CentreVax.personnelsMedical
   */
  export type CentreVax$personnelsMedicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    where?: PersonnelMedicalWhereInput
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    cursor?: PersonnelMedicalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonnelMedicalScalarFieldEnum | PersonnelMedicalScalarFieldEnum[]
  }

  /**
   * CentreVax.enfants
   */
  export type CentreVax$enfantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    where?: EnfantWhereInput
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    cursor?: EnfantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnfantScalarFieldEnum | EnfantScalarFieldEnum[]
  }

  /**
   * CentreVax.rendezVous
   */
  export type CentreVax$rendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    where?: RendezVousWhereInput
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    cursor?: RendezVousWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * CentreVax without action
   */
  export type CentreVaxDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreVax
     */
    select?: CentreVaxSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreVaxInclude<ExtArgs> | null
  }


  /**
   * Model PersonnelMedical
   */

  export type AggregatePersonnelMedical = {
    _count: PersonnelMedicalCountAggregateOutputType | null
    _avg: PersonnelMedicalAvgAggregateOutputType | null
    _sum: PersonnelMedicalSumAggregateOutputType | null
    _min: PersonnelMedicalMinAggregateOutputType | null
    _max: PersonnelMedicalMaxAggregateOutputType | null
  }

  export type PersonnelMedicalAvgAggregateOutputType = {
    idPM: number | null
    user_id: number | null
    numTelPM: number | null
    CentreVax_idC: number | null
  }

  export type PersonnelMedicalSumAggregateOutputType = {
    idPM: number | null
    user_id: number | null
    numTelPM: number | null
    CentreVax_idC: number | null
  }

  export type PersonnelMedicalMinAggregateOutputType = {
    idPM: number | null
    user_id: number | null
    emailPM: string | null
    nomPM: string | null
    prenomPM: string | null
    numTelPM: number | null
    rolePM: string | null
    CentreVax_idC: number | null
  }

  export type PersonnelMedicalMaxAggregateOutputType = {
    idPM: number | null
    user_id: number | null
    emailPM: string | null
    nomPM: string | null
    prenomPM: string | null
    numTelPM: number | null
    rolePM: string | null
    CentreVax_idC: number | null
  }

  export type PersonnelMedicalCountAggregateOutputType = {
    idPM: number
    user_id: number
    emailPM: number
    nomPM: number
    prenomPM: number
    numTelPM: number
    rolePM: number
    CentreVax_idC: number
    _all: number
  }


  export type PersonnelMedicalAvgAggregateInputType = {
    idPM?: true
    user_id?: true
    numTelPM?: true
    CentreVax_idC?: true
  }

  export type PersonnelMedicalSumAggregateInputType = {
    idPM?: true
    user_id?: true
    numTelPM?: true
    CentreVax_idC?: true
  }

  export type PersonnelMedicalMinAggregateInputType = {
    idPM?: true
    user_id?: true
    emailPM?: true
    nomPM?: true
    prenomPM?: true
    numTelPM?: true
    rolePM?: true
    CentreVax_idC?: true
  }

  export type PersonnelMedicalMaxAggregateInputType = {
    idPM?: true
    user_id?: true
    emailPM?: true
    nomPM?: true
    prenomPM?: true
    numTelPM?: true
    rolePM?: true
    CentreVax_idC?: true
  }

  export type PersonnelMedicalCountAggregateInputType = {
    idPM?: true
    user_id?: true
    emailPM?: true
    nomPM?: true
    prenomPM?: true
    numTelPM?: true
    rolePM?: true
    CentreVax_idC?: true
    _all?: true
  }

  export type PersonnelMedicalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonnelMedical to aggregate.
     */
    where?: PersonnelMedicalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonnelMedicals to fetch.
     */
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonnelMedicalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonnelMedicals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonnelMedicals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonnelMedicals
    **/
    _count?: true | PersonnelMedicalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonnelMedicalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonnelMedicalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonnelMedicalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonnelMedicalMaxAggregateInputType
  }

  export type GetPersonnelMedicalAggregateType<T extends PersonnelMedicalAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonnelMedical]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonnelMedical[P]>
      : GetScalarType<T[P], AggregatePersonnelMedical[P]>
  }




  export type PersonnelMedicalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonnelMedicalWhereInput
    orderBy?: PersonnelMedicalOrderByWithAggregationInput | PersonnelMedicalOrderByWithAggregationInput[]
    by: PersonnelMedicalScalarFieldEnum[] | PersonnelMedicalScalarFieldEnum
    having?: PersonnelMedicalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonnelMedicalCountAggregateInputType | true
    _avg?: PersonnelMedicalAvgAggregateInputType
    _sum?: PersonnelMedicalSumAggregateInputType
    _min?: PersonnelMedicalMinAggregateInputType
    _max?: PersonnelMedicalMaxAggregateInputType
  }

  export type PersonnelMedicalGroupByOutputType = {
    idPM: number
    user_id: number
    emailPM: string | null
    nomPM: string | null
    prenomPM: string | null
    numTelPM: number | null
    rolePM: string | null
    CentreVax_idC: number
    _count: PersonnelMedicalCountAggregateOutputType | null
    _avg: PersonnelMedicalAvgAggregateOutputType | null
    _sum: PersonnelMedicalSumAggregateOutputType | null
    _min: PersonnelMedicalMinAggregateOutputType | null
    _max: PersonnelMedicalMaxAggregateOutputType | null
  }

  type GetPersonnelMedicalGroupByPayload<T extends PersonnelMedicalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonnelMedicalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonnelMedicalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonnelMedicalGroupByOutputType[P]>
            : GetScalarType<T[P], PersonnelMedicalGroupByOutputType[P]>
        }
      >
    >


  export type PersonnelMedicalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPM?: boolean
    user_id?: boolean
    emailPM?: boolean
    nomPM?: boolean
    prenomPM?: boolean
    numTelPM?: boolean
    rolePM?: boolean
    CentreVax_idC?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    CentreVax?: boolean | CentreVaxDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personnelMedical"]>

  export type PersonnelMedicalSelectScalar = {
    idPM?: boolean
    user_id?: boolean
    emailPM?: boolean
    nomPM?: boolean
    prenomPM?: boolean
    numTelPM?: boolean
    rolePM?: boolean
    CentreVax_idC?: boolean
  }


  export type PersonnelMedicalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    CentreVax?: boolean | CentreVaxDefaultArgs<ExtArgs>
  }


  export type $PersonnelMedicalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonnelMedical"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      CentreVax: Prisma.$CentreVaxPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idPM: number
      user_id: number
      emailPM: string | null
      nomPM: string | null
      prenomPM: string | null
      numTelPM: number | null
      rolePM: string | null
      CentreVax_idC: number
    }, ExtArgs["result"]["personnelMedical"]>
    composites: {}
  }


  type PersonnelMedicalGetPayload<S extends boolean | null | undefined | PersonnelMedicalDefaultArgs> = $Result.GetResult<Prisma.$PersonnelMedicalPayload, S>

  type PersonnelMedicalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonnelMedicalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonnelMedicalCountAggregateInputType | true
    }

  export interface PersonnelMedicalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonnelMedical'], meta: { name: 'PersonnelMedical' } }
    /**
     * Find zero or one PersonnelMedical that matches the filter.
     * @param {PersonnelMedicalFindUniqueArgs} args - Arguments to find a PersonnelMedical
     * @example
     * // Get one PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonnelMedicalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PersonnelMedical that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PersonnelMedicalFindUniqueOrThrowArgs} args - Arguments to find a PersonnelMedical
     * @example
     * // Get one PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonnelMedicalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PersonnelMedical that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalFindFirstArgs} args - Arguments to find a PersonnelMedical
     * @example
     * // Get one PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonnelMedicalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalFindFirstArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PersonnelMedical that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalFindFirstOrThrowArgs} args - Arguments to find a PersonnelMedical
     * @example
     * // Get one PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonnelMedicalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PersonnelMedicals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonnelMedicals
     * const personnelMedicals = await prisma.personnelMedical.findMany()
     * 
     * // Get first 10 PersonnelMedicals
     * const personnelMedicals = await prisma.personnelMedical.findMany({ take: 10 })
     * 
     * // Only select the `idPM`
     * const personnelMedicalWithIdPMOnly = await prisma.personnelMedical.findMany({ select: { idPM: true } })
     * 
    **/
    findMany<T extends PersonnelMedicalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PersonnelMedical.
     * @param {PersonnelMedicalCreateArgs} args - Arguments to create a PersonnelMedical.
     * @example
     * // Create one PersonnelMedical
     * const PersonnelMedical = await prisma.personnelMedical.create({
     *   data: {
     *     // ... data to create a PersonnelMedical
     *   }
     * })
     * 
    **/
    create<T extends PersonnelMedicalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalCreateArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PersonnelMedicals.
     *     @param {PersonnelMedicalCreateManyArgs} args - Arguments to create many PersonnelMedicals.
     *     @example
     *     // Create many PersonnelMedicals
     *     const personnelMedical = await prisma.personnelMedical.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonnelMedicalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PersonnelMedical.
     * @param {PersonnelMedicalDeleteArgs} args - Arguments to delete one PersonnelMedical.
     * @example
     * // Delete one PersonnelMedical
     * const PersonnelMedical = await prisma.personnelMedical.delete({
     *   where: {
     *     // ... filter to delete one PersonnelMedical
     *   }
     * })
     * 
    **/
    delete<T extends PersonnelMedicalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalDeleteArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PersonnelMedical.
     * @param {PersonnelMedicalUpdateArgs} args - Arguments to update one PersonnelMedical.
     * @example
     * // Update one PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonnelMedicalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalUpdateArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PersonnelMedicals.
     * @param {PersonnelMedicalDeleteManyArgs} args - Arguments to filter PersonnelMedicals to delete.
     * @example
     * // Delete a few PersonnelMedicals
     * const { count } = await prisma.personnelMedical.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonnelMedicalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonnelMedicalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonnelMedicals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonnelMedicals
     * const personnelMedical = await prisma.personnelMedical.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonnelMedicalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PersonnelMedical.
     * @param {PersonnelMedicalUpsertArgs} args - Arguments to update or create a PersonnelMedical.
     * @example
     * // Update or create a PersonnelMedical
     * const personnelMedical = await prisma.personnelMedical.upsert({
     *   create: {
     *     // ... data to create a PersonnelMedical
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonnelMedical we want to update
     *   }
     * })
    **/
    upsert<T extends PersonnelMedicalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonnelMedicalUpsertArgs<ExtArgs>>
    ): Prisma__PersonnelMedicalClient<$Result.GetResult<Prisma.$PersonnelMedicalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PersonnelMedicals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalCountArgs} args - Arguments to filter PersonnelMedicals to count.
     * @example
     * // Count the number of PersonnelMedicals
     * const count = await prisma.personnelMedical.count({
     *   where: {
     *     // ... the filter for the PersonnelMedicals we want to count
     *   }
     * })
    **/
    count<T extends PersonnelMedicalCountArgs>(
      args?: Subset<T, PersonnelMedicalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonnelMedicalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonnelMedical.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonnelMedicalAggregateArgs>(args: Subset<T, PersonnelMedicalAggregateArgs>): Prisma.PrismaPromise<GetPersonnelMedicalAggregateType<T>>

    /**
     * Group by PersonnelMedical.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelMedicalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonnelMedicalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonnelMedicalGroupByArgs['orderBy'] }
        : { orderBy?: PersonnelMedicalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonnelMedicalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonnelMedicalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonnelMedical model
   */
  readonly fields: PersonnelMedicalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonnelMedical.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonnelMedicalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    CentreVax<T extends CentreVaxDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CentreVaxDefaultArgs<ExtArgs>>): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PersonnelMedical model
   */ 
  interface PersonnelMedicalFieldRefs {
    readonly idPM: FieldRef<"PersonnelMedical", 'Int'>
    readonly user_id: FieldRef<"PersonnelMedical", 'Int'>
    readonly emailPM: FieldRef<"PersonnelMedical", 'String'>
    readonly nomPM: FieldRef<"PersonnelMedical", 'String'>
    readonly prenomPM: FieldRef<"PersonnelMedical", 'String'>
    readonly numTelPM: FieldRef<"PersonnelMedical", 'Int'>
    readonly rolePM: FieldRef<"PersonnelMedical", 'String'>
    readonly CentreVax_idC: FieldRef<"PersonnelMedical", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PersonnelMedical findUnique
   */
  export type PersonnelMedicalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter, which PersonnelMedical to fetch.
     */
    where: PersonnelMedicalWhereUniqueInput
  }

  /**
   * PersonnelMedical findUniqueOrThrow
   */
  export type PersonnelMedicalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter, which PersonnelMedical to fetch.
     */
    where: PersonnelMedicalWhereUniqueInput
  }

  /**
   * PersonnelMedical findFirst
   */
  export type PersonnelMedicalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter, which PersonnelMedical to fetch.
     */
    where?: PersonnelMedicalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonnelMedicals to fetch.
     */
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonnelMedicals.
     */
    cursor?: PersonnelMedicalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonnelMedicals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonnelMedicals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonnelMedicals.
     */
    distinct?: PersonnelMedicalScalarFieldEnum | PersonnelMedicalScalarFieldEnum[]
  }

  /**
   * PersonnelMedical findFirstOrThrow
   */
  export type PersonnelMedicalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter, which PersonnelMedical to fetch.
     */
    where?: PersonnelMedicalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonnelMedicals to fetch.
     */
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonnelMedicals.
     */
    cursor?: PersonnelMedicalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonnelMedicals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonnelMedicals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonnelMedicals.
     */
    distinct?: PersonnelMedicalScalarFieldEnum | PersonnelMedicalScalarFieldEnum[]
  }

  /**
   * PersonnelMedical findMany
   */
  export type PersonnelMedicalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter, which PersonnelMedicals to fetch.
     */
    where?: PersonnelMedicalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonnelMedicals to fetch.
     */
    orderBy?: PersonnelMedicalOrderByWithRelationInput | PersonnelMedicalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonnelMedicals.
     */
    cursor?: PersonnelMedicalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonnelMedicals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonnelMedicals.
     */
    skip?: number
    distinct?: PersonnelMedicalScalarFieldEnum | PersonnelMedicalScalarFieldEnum[]
  }

  /**
   * PersonnelMedical create
   */
  export type PersonnelMedicalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonnelMedical.
     */
    data: XOR<PersonnelMedicalCreateInput, PersonnelMedicalUncheckedCreateInput>
  }

  /**
   * PersonnelMedical createMany
   */
  export type PersonnelMedicalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonnelMedicals.
     */
    data: PersonnelMedicalCreateManyInput | PersonnelMedicalCreateManyInput[]
  }

  /**
   * PersonnelMedical update
   */
  export type PersonnelMedicalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonnelMedical.
     */
    data: XOR<PersonnelMedicalUpdateInput, PersonnelMedicalUncheckedUpdateInput>
    /**
     * Choose, which PersonnelMedical to update.
     */
    where: PersonnelMedicalWhereUniqueInput
  }

  /**
   * PersonnelMedical updateMany
   */
  export type PersonnelMedicalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonnelMedicals.
     */
    data: XOR<PersonnelMedicalUpdateManyMutationInput, PersonnelMedicalUncheckedUpdateManyInput>
    /**
     * Filter which PersonnelMedicals to update
     */
    where?: PersonnelMedicalWhereInput
  }

  /**
   * PersonnelMedical upsert
   */
  export type PersonnelMedicalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonnelMedical to update in case it exists.
     */
    where: PersonnelMedicalWhereUniqueInput
    /**
     * In case the PersonnelMedical found by the `where` argument doesn't exist, create a new PersonnelMedical with this data.
     */
    create: XOR<PersonnelMedicalCreateInput, PersonnelMedicalUncheckedCreateInput>
    /**
     * In case the PersonnelMedical was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonnelMedicalUpdateInput, PersonnelMedicalUncheckedUpdateInput>
  }

  /**
   * PersonnelMedical delete
   */
  export type PersonnelMedicalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
    /**
     * Filter which PersonnelMedical to delete.
     */
    where: PersonnelMedicalWhereUniqueInput
  }

  /**
   * PersonnelMedical deleteMany
   */
  export type PersonnelMedicalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonnelMedicals to delete
     */
    where?: PersonnelMedicalWhereInput
  }

  /**
   * PersonnelMedical without action
   */
  export type PersonnelMedicalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelMedical
     */
    select?: PersonnelMedicalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelMedicalInclude<ExtArgs> | null
  }


  /**
   * Model Enfant
   */

  export type AggregateEnfant = {
    _count: EnfantCountAggregateOutputType | null
    _avg: EnfantAvgAggregateOutputType | null
    _sum: EnfantSumAggregateOutputType | null
    _min: EnfantMinAggregateOutputType | null
    _max: EnfantMaxAggregateOutputType | null
  }

  export type EnfantAvgAggregateOutputType = {
    idE: number | null
    centreSante_idC: number | null
    Parent_idP: number | null
  }

  export type EnfantSumAggregateOutputType = {
    idE: number | null
    centreSante_idC: number | null
    Parent_idP: number | null
  }

  export type EnfantMinAggregateOutputType = {
    idE: number | null
    nomCompletE: string | null
    dateNaiss: Date | null
    adresseE: string | null
    numSMI: string | null
    centreSante_idC: number | null
    sexe: string | null
    allergies: string | null
    groupeSang: string | null
    infoMedicaux: string | null
    province: string | null
    ville: string | null
    Parent_idP: number | null
  }

  export type EnfantMaxAggregateOutputType = {
    idE: number | null
    nomCompletE: string | null
    dateNaiss: Date | null
    adresseE: string | null
    numSMI: string | null
    centreSante_idC: number | null
    sexe: string | null
    allergies: string | null
    groupeSang: string | null
    infoMedicaux: string | null
    province: string | null
    ville: string | null
    Parent_idP: number | null
  }

  export type EnfantCountAggregateOutputType = {
    idE: number
    nomCompletE: number
    dateNaiss: number
    adresseE: number
    numSMI: number
    centreSante_idC: number
    sexe: number
    allergies: number
    groupeSang: number
    infoMedicaux: number
    province: number
    ville: number
    Parent_idP: number
    _all: number
  }


  export type EnfantAvgAggregateInputType = {
    idE?: true
    centreSante_idC?: true
    Parent_idP?: true
  }

  export type EnfantSumAggregateInputType = {
    idE?: true
    centreSante_idC?: true
    Parent_idP?: true
  }

  export type EnfantMinAggregateInputType = {
    idE?: true
    nomCompletE?: true
    dateNaiss?: true
    adresseE?: true
    numSMI?: true
    centreSante_idC?: true
    sexe?: true
    allergies?: true
    groupeSang?: true
    infoMedicaux?: true
    province?: true
    ville?: true
    Parent_idP?: true
  }

  export type EnfantMaxAggregateInputType = {
    idE?: true
    nomCompletE?: true
    dateNaiss?: true
    adresseE?: true
    numSMI?: true
    centreSante_idC?: true
    sexe?: true
    allergies?: true
    groupeSang?: true
    infoMedicaux?: true
    province?: true
    ville?: true
    Parent_idP?: true
  }

  export type EnfantCountAggregateInputType = {
    idE?: true
    nomCompletE?: true
    dateNaiss?: true
    adresseE?: true
    numSMI?: true
    centreSante_idC?: true
    sexe?: true
    allergies?: true
    groupeSang?: true
    infoMedicaux?: true
    province?: true
    ville?: true
    Parent_idP?: true
    _all?: true
  }

  export type EnfantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enfant to aggregate.
     */
    where?: EnfantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfants to fetch.
     */
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnfantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enfants
    **/
    _count?: true | EnfantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnfantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnfantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnfantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnfantMaxAggregateInputType
  }

  export type GetEnfantAggregateType<T extends EnfantAggregateArgs> = {
        [P in keyof T & keyof AggregateEnfant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnfant[P]>
      : GetScalarType<T[P], AggregateEnfant[P]>
  }




  export type EnfantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnfantWhereInput
    orderBy?: EnfantOrderByWithAggregationInput | EnfantOrderByWithAggregationInput[]
    by: EnfantScalarFieldEnum[] | EnfantScalarFieldEnum
    having?: EnfantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnfantCountAggregateInputType | true
    _avg?: EnfantAvgAggregateInputType
    _sum?: EnfantSumAggregateInputType
    _min?: EnfantMinAggregateInputType
    _max?: EnfantMaxAggregateInputType
  }

  export type EnfantGroupByOutputType = {
    idE: number
    nomCompletE: string
    dateNaiss: Date | null
    adresseE: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies: string | null
    groupeSang: string | null
    infoMedicaux: string | null
    province: string | null
    ville: string | null
    Parent_idP: number
    _count: EnfantCountAggregateOutputType | null
    _avg: EnfantAvgAggregateOutputType | null
    _sum: EnfantSumAggregateOutputType | null
    _min: EnfantMinAggregateOutputType | null
    _max: EnfantMaxAggregateOutputType | null
  }

  type GetEnfantGroupByPayload<T extends EnfantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnfantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnfantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnfantGroupByOutputType[P]>
            : GetScalarType<T[P], EnfantGroupByOutputType[P]>
        }
      >
    >


  export type EnfantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idE?: boolean
    nomCompletE?: boolean
    dateNaiss?: boolean
    adresseE?: boolean
    numSMI?: boolean
    centreSante_idC?: boolean
    sexe?: boolean
    allergies?: boolean
    groupeSang?: boolean
    infoMedicaux?: boolean
    province?: boolean
    ville?: boolean
    Parent_idP?: boolean
    centreSante?: boolean | CentreVaxDefaultArgs<ExtArgs>
    Parent?: boolean | ParentDefaultArgs<ExtArgs>
    vaccins?: boolean | Enfant$vaccinsArgs<ExtArgs>
    _count?: boolean | EnfantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enfant"]>

  export type EnfantSelectScalar = {
    idE?: boolean
    nomCompletE?: boolean
    dateNaiss?: boolean
    adresseE?: boolean
    numSMI?: boolean
    centreSante_idC?: boolean
    sexe?: boolean
    allergies?: boolean
    groupeSang?: boolean
    infoMedicaux?: boolean
    province?: boolean
    ville?: boolean
    Parent_idP?: boolean
  }


  export type EnfantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    centreSante?: boolean | CentreVaxDefaultArgs<ExtArgs>
    Parent?: boolean | ParentDefaultArgs<ExtArgs>
    vaccins?: boolean | Enfant$vaccinsArgs<ExtArgs>
    _count?: boolean | EnfantCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EnfantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enfant"
    objects: {
      centreSante: Prisma.$CentreVaxPayload<ExtArgs>
      Parent: Prisma.$ParentPayload<ExtArgs>
      vaccins: Prisma.$VaccinPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idE: number
      nomCompletE: string
      dateNaiss: Date | null
      adresseE: string | null
      numSMI: string
      centreSante_idC: number
      sexe: string
      allergies: string | null
      groupeSang: string | null
      infoMedicaux: string | null
      province: string | null
      ville: string | null
      Parent_idP: number
    }, ExtArgs["result"]["enfant"]>
    composites: {}
  }


  type EnfantGetPayload<S extends boolean | null | undefined | EnfantDefaultArgs> = $Result.GetResult<Prisma.$EnfantPayload, S>

  type EnfantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnfantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnfantCountAggregateInputType | true
    }

  export interface EnfantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enfant'], meta: { name: 'Enfant' } }
    /**
     * Find zero or one Enfant that matches the filter.
     * @param {EnfantFindUniqueArgs} args - Arguments to find a Enfant
     * @example
     * // Get one Enfant
     * const enfant = await prisma.enfant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnfantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantFindUniqueArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Enfant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnfantFindUniqueOrThrowArgs} args - Arguments to find a Enfant
     * @example
     * // Get one Enfant
     * const enfant = await prisma.enfant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnfantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Enfant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantFindFirstArgs} args - Arguments to find a Enfant
     * @example
     * // Get one Enfant
     * const enfant = await prisma.enfant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnfantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantFindFirstArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Enfant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantFindFirstOrThrowArgs} args - Arguments to find a Enfant
     * @example
     * // Get one Enfant
     * const enfant = await prisma.enfant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnfantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Enfants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enfants
     * const enfants = await prisma.enfant.findMany()
     * 
     * // Get first 10 Enfants
     * const enfants = await prisma.enfant.findMany({ take: 10 })
     * 
     * // Only select the `idE`
     * const enfantWithIdEOnly = await prisma.enfant.findMany({ select: { idE: true } })
     * 
    **/
    findMany<T extends EnfantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Enfant.
     * @param {EnfantCreateArgs} args - Arguments to create a Enfant.
     * @example
     * // Create one Enfant
     * const Enfant = await prisma.enfant.create({
     *   data: {
     *     // ... data to create a Enfant
     *   }
     * })
     * 
    **/
    create<T extends EnfantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantCreateArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Enfants.
     *     @param {EnfantCreateManyArgs} args - Arguments to create many Enfants.
     *     @example
     *     // Create many Enfants
     *     const enfant = await prisma.enfant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnfantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Enfant.
     * @param {EnfantDeleteArgs} args - Arguments to delete one Enfant.
     * @example
     * // Delete one Enfant
     * const Enfant = await prisma.enfant.delete({
     *   where: {
     *     // ... filter to delete one Enfant
     *   }
     * })
     * 
    **/
    delete<T extends EnfantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantDeleteArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Enfant.
     * @param {EnfantUpdateArgs} args - Arguments to update one Enfant.
     * @example
     * // Update one Enfant
     * const enfant = await prisma.enfant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnfantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantUpdateArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Enfants.
     * @param {EnfantDeleteManyArgs} args - Arguments to filter Enfants to delete.
     * @example
     * // Delete a few Enfants
     * const { count } = await prisma.enfant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnfantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnfantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enfants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enfants
     * const enfant = await prisma.enfant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnfantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enfant.
     * @param {EnfantUpsertArgs} args - Arguments to update or create a Enfant.
     * @example
     * // Update or create a Enfant
     * const enfant = await prisma.enfant.upsert({
     *   create: {
     *     // ... data to create a Enfant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enfant we want to update
     *   }
     * })
    **/
    upsert<T extends EnfantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EnfantUpsertArgs<ExtArgs>>
    ): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Enfants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantCountArgs} args - Arguments to filter Enfants to count.
     * @example
     * // Count the number of Enfants
     * const count = await prisma.enfant.count({
     *   where: {
     *     // ... the filter for the Enfants we want to count
     *   }
     * })
    **/
    count<T extends EnfantCountArgs>(
      args?: Subset<T, EnfantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnfantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enfant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnfantAggregateArgs>(args: Subset<T, EnfantAggregateArgs>): Prisma.PrismaPromise<GetEnfantAggregateType<T>>

    /**
     * Group by Enfant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnfantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnfantGroupByArgs['orderBy'] }
        : { orderBy?: EnfantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnfantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnfantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enfant model
   */
  readonly fields: EnfantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enfant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnfantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    centreSante<T extends CentreVaxDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CentreVaxDefaultArgs<ExtArgs>>): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Parent<T extends ParentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParentDefaultArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    vaccins<T extends Enfant$vaccinsArgs<ExtArgs> = {}>(args?: Subset<T, Enfant$vaccinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Enfant model
   */ 
  interface EnfantFieldRefs {
    readonly idE: FieldRef<"Enfant", 'Int'>
    readonly nomCompletE: FieldRef<"Enfant", 'String'>
    readonly dateNaiss: FieldRef<"Enfant", 'DateTime'>
    readonly adresseE: FieldRef<"Enfant", 'String'>
    readonly numSMI: FieldRef<"Enfant", 'String'>
    readonly centreSante_idC: FieldRef<"Enfant", 'Int'>
    readonly sexe: FieldRef<"Enfant", 'String'>
    readonly allergies: FieldRef<"Enfant", 'String'>
    readonly groupeSang: FieldRef<"Enfant", 'String'>
    readonly infoMedicaux: FieldRef<"Enfant", 'String'>
    readonly province: FieldRef<"Enfant", 'String'>
    readonly ville: FieldRef<"Enfant", 'String'>
    readonly Parent_idP: FieldRef<"Enfant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Enfant findUnique
   */
  export type EnfantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter, which Enfant to fetch.
     */
    where: EnfantWhereUniqueInput
  }

  /**
   * Enfant findUniqueOrThrow
   */
  export type EnfantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter, which Enfant to fetch.
     */
    where: EnfantWhereUniqueInput
  }

  /**
   * Enfant findFirst
   */
  export type EnfantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter, which Enfant to fetch.
     */
    where?: EnfantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfants to fetch.
     */
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enfants.
     */
    cursor?: EnfantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enfants.
     */
    distinct?: EnfantScalarFieldEnum | EnfantScalarFieldEnum[]
  }

  /**
   * Enfant findFirstOrThrow
   */
  export type EnfantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter, which Enfant to fetch.
     */
    where?: EnfantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfants to fetch.
     */
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enfants.
     */
    cursor?: EnfantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enfants.
     */
    distinct?: EnfantScalarFieldEnum | EnfantScalarFieldEnum[]
  }

  /**
   * Enfant findMany
   */
  export type EnfantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter, which Enfants to fetch.
     */
    where?: EnfantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfants to fetch.
     */
    orderBy?: EnfantOrderByWithRelationInput | EnfantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enfants.
     */
    cursor?: EnfantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfants.
     */
    skip?: number
    distinct?: EnfantScalarFieldEnum | EnfantScalarFieldEnum[]
  }

  /**
   * Enfant create
   */
  export type EnfantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * The data needed to create a Enfant.
     */
    data: XOR<EnfantCreateInput, EnfantUncheckedCreateInput>
  }

  /**
   * Enfant createMany
   */
  export type EnfantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enfants.
     */
    data: EnfantCreateManyInput | EnfantCreateManyInput[]
  }

  /**
   * Enfant update
   */
  export type EnfantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * The data needed to update a Enfant.
     */
    data: XOR<EnfantUpdateInput, EnfantUncheckedUpdateInput>
    /**
     * Choose, which Enfant to update.
     */
    where: EnfantWhereUniqueInput
  }

  /**
   * Enfant updateMany
   */
  export type EnfantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enfants.
     */
    data: XOR<EnfantUpdateManyMutationInput, EnfantUncheckedUpdateManyInput>
    /**
     * Filter which Enfants to update
     */
    where?: EnfantWhereInput
  }

  /**
   * Enfant upsert
   */
  export type EnfantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * The filter to search for the Enfant to update in case it exists.
     */
    where: EnfantWhereUniqueInput
    /**
     * In case the Enfant found by the `where` argument doesn't exist, create a new Enfant with this data.
     */
    create: XOR<EnfantCreateInput, EnfantUncheckedCreateInput>
    /**
     * In case the Enfant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnfantUpdateInput, EnfantUncheckedUpdateInput>
  }

  /**
   * Enfant delete
   */
  export type EnfantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
    /**
     * Filter which Enfant to delete.
     */
    where: EnfantWhereUniqueInput
  }

  /**
   * Enfant deleteMany
   */
  export type EnfantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enfants to delete
     */
    where?: EnfantWhereInput
  }

  /**
   * Enfant.vaccins
   */
  export type Enfant$vaccinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    where?: VaccinWhereInput
    orderBy?: VaccinOrderByWithRelationInput | VaccinOrderByWithRelationInput[]
    cursor?: VaccinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VaccinScalarFieldEnum | VaccinScalarFieldEnum[]
  }

  /**
   * Enfant without action
   */
  export type EnfantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfant
     */
    select?: EnfantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfantInclude<ExtArgs> | null
  }


  /**
   * Model Vaccin
   */

  export type AggregateVaccin = {
    _count: VaccinCountAggregateOutputType | null
    _avg: VaccinAvgAggregateOutputType | null
    _sum: VaccinSumAggregateOutputType | null
    _min: VaccinMinAggregateOutputType | null
    _max: VaccinMaxAggregateOutputType | null
  }

  export type VaccinAvgAggregateOutputType = {
    idV: number | null
    ageRecommande: number | null
    Enfant_idE: number | null
  }

  export type VaccinSumAggregateOutputType = {
    idV: number | null
    ageRecommande: number | null
    Enfant_idE: number | null
  }

  export type VaccinMinAggregateOutputType = {
    idV: number | null
    nomV: string | null
    descr: string | null
    EffetSecondaire: string | null
    ageRecommande: number | null
    doseV: string | null
    abreviationV: string | null
    maladieEvitable: string | null
    Enfant_idE: number | null
  }

  export type VaccinMaxAggregateOutputType = {
    idV: number | null
    nomV: string | null
    descr: string | null
    EffetSecondaire: string | null
    ageRecommande: number | null
    doseV: string | null
    abreviationV: string | null
    maladieEvitable: string | null
    Enfant_idE: number | null
  }

  export type VaccinCountAggregateOutputType = {
    idV: number
    nomV: number
    descr: number
    EffetSecondaire: number
    ageRecommande: number
    doseV: number
    abreviationV: number
    maladieEvitable: number
    Enfant_idE: number
    _all: number
  }


  export type VaccinAvgAggregateInputType = {
    idV?: true
    ageRecommande?: true
    Enfant_idE?: true
  }

  export type VaccinSumAggregateInputType = {
    idV?: true
    ageRecommande?: true
    Enfant_idE?: true
  }

  export type VaccinMinAggregateInputType = {
    idV?: true
    nomV?: true
    descr?: true
    EffetSecondaire?: true
    ageRecommande?: true
    doseV?: true
    abreviationV?: true
    maladieEvitable?: true
    Enfant_idE?: true
  }

  export type VaccinMaxAggregateInputType = {
    idV?: true
    nomV?: true
    descr?: true
    EffetSecondaire?: true
    ageRecommande?: true
    doseV?: true
    abreviationV?: true
    maladieEvitable?: true
    Enfant_idE?: true
  }

  export type VaccinCountAggregateInputType = {
    idV?: true
    nomV?: true
    descr?: true
    EffetSecondaire?: true
    ageRecommande?: true
    doseV?: true
    abreviationV?: true
    maladieEvitable?: true
    Enfant_idE?: true
    _all?: true
  }

  export type VaccinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vaccin to aggregate.
     */
    where?: VaccinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccins to fetch.
     */
    orderBy?: VaccinOrderByWithRelationInput | VaccinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VaccinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vaccins
    **/
    _count?: true | VaccinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VaccinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VaccinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VaccinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VaccinMaxAggregateInputType
  }

  export type GetVaccinAggregateType<T extends VaccinAggregateArgs> = {
        [P in keyof T & keyof AggregateVaccin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVaccin[P]>
      : GetScalarType<T[P], AggregateVaccin[P]>
  }




  export type VaccinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VaccinWhereInput
    orderBy?: VaccinOrderByWithAggregationInput | VaccinOrderByWithAggregationInput[]
    by: VaccinScalarFieldEnum[] | VaccinScalarFieldEnum
    having?: VaccinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VaccinCountAggregateInputType | true
    _avg?: VaccinAvgAggregateInputType
    _sum?: VaccinSumAggregateInputType
    _min?: VaccinMinAggregateInputType
    _max?: VaccinMaxAggregateInputType
  }

  export type VaccinGroupByOutputType = {
    idV: number
    nomV: string
    descr: string | null
    EffetSecondaire: string | null
    ageRecommande: number | null
    doseV: string | null
    abreviationV: string | null
    maladieEvitable: string | null
    Enfant_idE: number
    _count: VaccinCountAggregateOutputType | null
    _avg: VaccinAvgAggregateOutputType | null
    _sum: VaccinSumAggregateOutputType | null
    _min: VaccinMinAggregateOutputType | null
    _max: VaccinMaxAggregateOutputType | null
  }

  type GetVaccinGroupByPayload<T extends VaccinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VaccinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VaccinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VaccinGroupByOutputType[P]>
            : GetScalarType<T[P], VaccinGroupByOutputType[P]>
        }
      >
    >


  export type VaccinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idV?: boolean
    nomV?: boolean
    descr?: boolean
    EffetSecondaire?: boolean
    ageRecommande?: boolean
    doseV?: boolean
    abreviationV?: boolean
    maladieEvitable?: boolean
    Enfant_idE?: boolean
    enfant?: boolean | EnfantDefaultArgs<ExtArgs>
    rendezVous?: boolean | Vaccin$rendezVousArgs<ExtArgs>
    _count?: boolean | VaccinCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vaccin"]>

  export type VaccinSelectScalar = {
    idV?: boolean
    nomV?: boolean
    descr?: boolean
    EffetSecondaire?: boolean
    ageRecommande?: boolean
    doseV?: boolean
    abreviationV?: boolean
    maladieEvitable?: boolean
    Enfant_idE?: boolean
  }


  export type VaccinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enfant?: boolean | EnfantDefaultArgs<ExtArgs>
    rendezVous?: boolean | Vaccin$rendezVousArgs<ExtArgs>
    _count?: boolean | VaccinCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $VaccinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vaccin"
    objects: {
      enfant: Prisma.$EnfantPayload<ExtArgs>
      rendezVous: Prisma.$RendezVousPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idV: number
      nomV: string
      descr: string | null
      EffetSecondaire: string | null
      ageRecommande: number | null
      doseV: string | null
      abreviationV: string | null
      maladieEvitable: string | null
      Enfant_idE: number
    }, ExtArgs["result"]["vaccin"]>
    composites: {}
  }


  type VaccinGetPayload<S extends boolean | null | undefined | VaccinDefaultArgs> = $Result.GetResult<Prisma.$VaccinPayload, S>

  type VaccinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VaccinFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VaccinCountAggregateInputType | true
    }

  export interface VaccinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vaccin'], meta: { name: 'Vaccin' } }
    /**
     * Find zero or one Vaccin that matches the filter.
     * @param {VaccinFindUniqueArgs} args - Arguments to find a Vaccin
     * @example
     * // Get one Vaccin
     * const vaccin = await prisma.vaccin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VaccinFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinFindUniqueArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vaccin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VaccinFindUniqueOrThrowArgs} args - Arguments to find a Vaccin
     * @example
     * // Get one Vaccin
     * const vaccin = await prisma.vaccin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VaccinFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vaccin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinFindFirstArgs} args - Arguments to find a Vaccin
     * @example
     * // Get one Vaccin
     * const vaccin = await prisma.vaccin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VaccinFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinFindFirstArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vaccin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinFindFirstOrThrowArgs} args - Arguments to find a Vaccin
     * @example
     * // Get one Vaccin
     * const vaccin = await prisma.vaccin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VaccinFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Vaccins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vaccins
     * const vaccins = await prisma.vaccin.findMany()
     * 
     * // Get first 10 Vaccins
     * const vaccins = await prisma.vaccin.findMany({ take: 10 })
     * 
     * // Only select the `idV`
     * const vaccinWithIdVOnly = await prisma.vaccin.findMany({ select: { idV: true } })
     * 
    **/
    findMany<T extends VaccinFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vaccin.
     * @param {VaccinCreateArgs} args - Arguments to create a Vaccin.
     * @example
     * // Create one Vaccin
     * const Vaccin = await prisma.vaccin.create({
     *   data: {
     *     // ... data to create a Vaccin
     *   }
     * })
     * 
    **/
    create<T extends VaccinCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinCreateArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Vaccins.
     *     @param {VaccinCreateManyArgs} args - Arguments to create many Vaccins.
     *     @example
     *     // Create many Vaccins
     *     const vaccin = await prisma.vaccin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VaccinCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vaccin.
     * @param {VaccinDeleteArgs} args - Arguments to delete one Vaccin.
     * @example
     * // Delete one Vaccin
     * const Vaccin = await prisma.vaccin.delete({
     *   where: {
     *     // ... filter to delete one Vaccin
     *   }
     * })
     * 
    **/
    delete<T extends VaccinDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinDeleteArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vaccin.
     * @param {VaccinUpdateArgs} args - Arguments to update one Vaccin.
     * @example
     * // Update one Vaccin
     * const vaccin = await prisma.vaccin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VaccinUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinUpdateArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Vaccins.
     * @param {VaccinDeleteManyArgs} args - Arguments to filter Vaccins to delete.
     * @example
     * // Delete a few Vaccins
     * const { count } = await prisma.vaccin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VaccinDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VaccinDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vaccins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vaccins
     * const vaccin = await prisma.vaccin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VaccinUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vaccin.
     * @param {VaccinUpsertArgs} args - Arguments to update or create a Vaccin.
     * @example
     * // Update or create a Vaccin
     * const vaccin = await prisma.vaccin.upsert({
     *   create: {
     *     // ... data to create a Vaccin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vaccin we want to update
     *   }
     * })
    **/
    upsert<T extends VaccinUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VaccinUpsertArgs<ExtArgs>>
    ): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Vaccins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinCountArgs} args - Arguments to filter Vaccins to count.
     * @example
     * // Count the number of Vaccins
     * const count = await prisma.vaccin.count({
     *   where: {
     *     // ... the filter for the Vaccins we want to count
     *   }
     * })
    **/
    count<T extends VaccinCountArgs>(
      args?: Subset<T, VaccinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VaccinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vaccin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VaccinAggregateArgs>(args: Subset<T, VaccinAggregateArgs>): Prisma.PrismaPromise<GetVaccinAggregateType<T>>

    /**
     * Group by Vaccin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VaccinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VaccinGroupByArgs['orderBy'] }
        : { orderBy?: VaccinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VaccinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVaccinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vaccin model
   */
  readonly fields: VaccinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vaccin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VaccinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    enfant<T extends EnfantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnfantDefaultArgs<ExtArgs>>): Prisma__EnfantClient<$Result.GetResult<Prisma.$EnfantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    rendezVous<T extends Vaccin$rendezVousArgs<ExtArgs> = {}>(args?: Subset<T, Vaccin$rendezVousArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Vaccin model
   */ 
  interface VaccinFieldRefs {
    readonly idV: FieldRef<"Vaccin", 'Int'>
    readonly nomV: FieldRef<"Vaccin", 'String'>
    readonly descr: FieldRef<"Vaccin", 'String'>
    readonly EffetSecondaire: FieldRef<"Vaccin", 'String'>
    readonly ageRecommande: FieldRef<"Vaccin", 'Int'>
    readonly doseV: FieldRef<"Vaccin", 'String'>
    readonly abreviationV: FieldRef<"Vaccin", 'String'>
    readonly maladieEvitable: FieldRef<"Vaccin", 'String'>
    readonly Enfant_idE: FieldRef<"Vaccin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Vaccin findUnique
   */
  export type VaccinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter, which Vaccin to fetch.
     */
    where: VaccinWhereUniqueInput
  }

  /**
   * Vaccin findUniqueOrThrow
   */
  export type VaccinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter, which Vaccin to fetch.
     */
    where: VaccinWhereUniqueInput
  }

  /**
   * Vaccin findFirst
   */
  export type VaccinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter, which Vaccin to fetch.
     */
    where?: VaccinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccins to fetch.
     */
    orderBy?: VaccinOrderByWithRelationInput | VaccinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vaccins.
     */
    cursor?: VaccinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vaccins.
     */
    distinct?: VaccinScalarFieldEnum | VaccinScalarFieldEnum[]
  }

  /**
   * Vaccin findFirstOrThrow
   */
  export type VaccinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter, which Vaccin to fetch.
     */
    where?: VaccinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccins to fetch.
     */
    orderBy?: VaccinOrderByWithRelationInput | VaccinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vaccins.
     */
    cursor?: VaccinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vaccins.
     */
    distinct?: VaccinScalarFieldEnum | VaccinScalarFieldEnum[]
  }

  /**
   * Vaccin findMany
   */
  export type VaccinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter, which Vaccins to fetch.
     */
    where?: VaccinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vaccins to fetch.
     */
    orderBy?: VaccinOrderByWithRelationInput | VaccinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vaccins.
     */
    cursor?: VaccinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vaccins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vaccins.
     */
    skip?: number
    distinct?: VaccinScalarFieldEnum | VaccinScalarFieldEnum[]
  }

  /**
   * Vaccin create
   */
  export type VaccinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * The data needed to create a Vaccin.
     */
    data: XOR<VaccinCreateInput, VaccinUncheckedCreateInput>
  }

  /**
   * Vaccin createMany
   */
  export type VaccinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vaccins.
     */
    data: VaccinCreateManyInput | VaccinCreateManyInput[]
  }

  /**
   * Vaccin update
   */
  export type VaccinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * The data needed to update a Vaccin.
     */
    data: XOR<VaccinUpdateInput, VaccinUncheckedUpdateInput>
    /**
     * Choose, which Vaccin to update.
     */
    where: VaccinWhereUniqueInput
  }

  /**
   * Vaccin updateMany
   */
  export type VaccinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vaccins.
     */
    data: XOR<VaccinUpdateManyMutationInput, VaccinUncheckedUpdateManyInput>
    /**
     * Filter which Vaccins to update
     */
    where?: VaccinWhereInput
  }

  /**
   * Vaccin upsert
   */
  export type VaccinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * The filter to search for the Vaccin to update in case it exists.
     */
    where: VaccinWhereUniqueInput
    /**
     * In case the Vaccin found by the `where` argument doesn't exist, create a new Vaccin with this data.
     */
    create: XOR<VaccinCreateInput, VaccinUncheckedCreateInput>
    /**
     * In case the Vaccin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VaccinUpdateInput, VaccinUncheckedUpdateInput>
  }

  /**
   * Vaccin delete
   */
  export type VaccinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
    /**
     * Filter which Vaccin to delete.
     */
    where: VaccinWhereUniqueInput
  }

  /**
   * Vaccin deleteMany
   */
  export type VaccinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vaccins to delete
     */
    where?: VaccinWhereInput
  }

  /**
   * Vaccin.rendezVous
   */
  export type Vaccin$rendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    where?: RendezVousWhereInput
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    cursor?: RendezVousWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * Vaccin without action
   */
  export type VaccinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vaccin
     */
    select?: VaccinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VaccinInclude<ExtArgs> | null
  }


  /**
   * Model RendezVous
   */

  export type AggregateRendezVous = {
    _count: RendezVousCountAggregateOutputType | null
    _avg: RendezVousAvgAggregateOutputType | null
    _sum: RendezVousSumAggregateOutputType | null
    _min: RendezVousMinAggregateOutputType | null
    _max: RendezVousMaxAggregateOutputType | null
  }

  export type RendezVousAvgAggregateOutputType = {
    idR: number | null
    CentreVax_idC: number | null
    Parent_idP: number | null
    Vaccin_idV: number | null
  }

  export type RendezVousSumAggregateOutputType = {
    idR: number | null
    CentreVax_idC: number | null
    Parent_idP: number | null
    Vaccin_idV: number | null
  }

  export type RendezVousMinAggregateOutputType = {
    idR: number | null
    dateR: Date | null
    statusR: string | null
    CentreVax_idC: number | null
    Parent_idP: number | null
    Vaccin_idV: number | null
  }

  export type RendezVousMaxAggregateOutputType = {
    idR: number | null
    dateR: Date | null
    statusR: string | null
    CentreVax_idC: number | null
    Parent_idP: number | null
    Vaccin_idV: number | null
  }

  export type RendezVousCountAggregateOutputType = {
    idR: number
    dateR: number
    statusR: number
    CentreVax_idC: number
    Parent_idP: number
    Vaccin_idV: number
    _all: number
  }


  export type RendezVousAvgAggregateInputType = {
    idR?: true
    CentreVax_idC?: true
    Parent_idP?: true
    Vaccin_idV?: true
  }

  export type RendezVousSumAggregateInputType = {
    idR?: true
    CentreVax_idC?: true
    Parent_idP?: true
    Vaccin_idV?: true
  }

  export type RendezVousMinAggregateInputType = {
    idR?: true
    dateR?: true
    statusR?: true
    CentreVax_idC?: true
    Parent_idP?: true
    Vaccin_idV?: true
  }

  export type RendezVousMaxAggregateInputType = {
    idR?: true
    dateR?: true
    statusR?: true
    CentreVax_idC?: true
    Parent_idP?: true
    Vaccin_idV?: true
  }

  export type RendezVousCountAggregateInputType = {
    idR?: true
    dateR?: true
    statusR?: true
    CentreVax_idC?: true
    Parent_idP?: true
    Vaccin_idV?: true
    _all?: true
  }

  export type RendezVousAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RendezVous to aggregate.
     */
    where?: RendezVousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RendezVous to fetch.
     */
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RendezVousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RendezVous from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RendezVous.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RendezVous
    **/
    _count?: true | RendezVousCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RendezVousAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RendezVousSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RendezVousMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RendezVousMaxAggregateInputType
  }

  export type GetRendezVousAggregateType<T extends RendezVousAggregateArgs> = {
        [P in keyof T & keyof AggregateRendezVous]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRendezVous[P]>
      : GetScalarType<T[P], AggregateRendezVous[P]>
  }




  export type RendezVousGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RendezVousWhereInput
    orderBy?: RendezVousOrderByWithAggregationInput | RendezVousOrderByWithAggregationInput[]
    by: RendezVousScalarFieldEnum[] | RendezVousScalarFieldEnum
    having?: RendezVousScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RendezVousCountAggregateInputType | true
    _avg?: RendezVousAvgAggregateInputType
    _sum?: RendezVousSumAggregateInputType
    _min?: RendezVousMinAggregateInputType
    _max?: RendezVousMaxAggregateInputType
  }

  export type RendezVousGroupByOutputType = {
    idR: number
    dateR: Date | null
    statusR: string
    CentreVax_idC: number
    Parent_idP: number
    Vaccin_idV: number
    _count: RendezVousCountAggregateOutputType | null
    _avg: RendezVousAvgAggregateOutputType | null
    _sum: RendezVousSumAggregateOutputType | null
    _min: RendezVousMinAggregateOutputType | null
    _max: RendezVousMaxAggregateOutputType | null
  }

  type GetRendezVousGroupByPayload<T extends RendezVousGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RendezVousGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RendezVousGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RendezVousGroupByOutputType[P]>
            : GetScalarType<T[P], RendezVousGroupByOutputType[P]>
        }
      >
    >


  export type RendezVousSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idR?: boolean
    dateR?: boolean
    statusR?: boolean
    CentreVax_idC?: boolean
    Parent_idP?: boolean
    Vaccin_idV?: boolean
    CentreVax?: boolean | CentreVaxDefaultArgs<ExtArgs>
    Parent?: boolean | ParentDefaultArgs<ExtArgs>
    Vaccin?: boolean | VaccinDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rendezVous"]>

  export type RendezVousSelectScalar = {
    idR?: boolean
    dateR?: boolean
    statusR?: boolean
    CentreVax_idC?: boolean
    Parent_idP?: boolean
    Vaccin_idV?: boolean
  }


  export type RendezVousInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CentreVax?: boolean | CentreVaxDefaultArgs<ExtArgs>
    Parent?: boolean | ParentDefaultArgs<ExtArgs>
    Vaccin?: boolean | VaccinDefaultArgs<ExtArgs>
  }


  export type $RendezVousPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RendezVous"
    objects: {
      CentreVax: Prisma.$CentreVaxPayload<ExtArgs>
      Parent: Prisma.$ParentPayload<ExtArgs>
      Vaccin: Prisma.$VaccinPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idR: number
      dateR: Date | null
      statusR: string
      CentreVax_idC: number
      Parent_idP: number
      Vaccin_idV: number
    }, ExtArgs["result"]["rendezVous"]>
    composites: {}
  }


  type RendezVousGetPayload<S extends boolean | null | undefined | RendezVousDefaultArgs> = $Result.GetResult<Prisma.$RendezVousPayload, S>

  type RendezVousCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RendezVousFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RendezVousCountAggregateInputType | true
    }

  export interface RendezVousDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RendezVous'], meta: { name: 'RendezVous' } }
    /**
     * Find zero or one RendezVous that matches the filter.
     * @param {RendezVousFindUniqueArgs} args - Arguments to find a RendezVous
     * @example
     * // Get one RendezVous
     * const rendezVous = await prisma.rendezVous.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RendezVousFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousFindUniqueArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RendezVous that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RendezVousFindUniqueOrThrowArgs} args - Arguments to find a RendezVous
     * @example
     * // Get one RendezVous
     * const rendezVous = await prisma.rendezVous.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RendezVousFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RendezVous that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousFindFirstArgs} args - Arguments to find a RendezVous
     * @example
     * // Get one RendezVous
     * const rendezVous = await prisma.rendezVous.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RendezVousFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousFindFirstArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RendezVous that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousFindFirstOrThrowArgs} args - Arguments to find a RendezVous
     * @example
     * // Get one RendezVous
     * const rendezVous = await prisma.rendezVous.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RendezVousFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RendezVous that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RendezVous
     * const rendezVous = await prisma.rendezVous.findMany()
     * 
     * // Get first 10 RendezVous
     * const rendezVous = await prisma.rendezVous.findMany({ take: 10 })
     * 
     * // Only select the `idR`
     * const rendezVousWithIdROnly = await prisma.rendezVous.findMany({ select: { idR: true } })
     * 
    **/
    findMany<T extends RendezVousFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RendezVous.
     * @param {RendezVousCreateArgs} args - Arguments to create a RendezVous.
     * @example
     * // Create one RendezVous
     * const RendezVous = await prisma.rendezVous.create({
     *   data: {
     *     // ... data to create a RendezVous
     *   }
     * })
     * 
    **/
    create<T extends RendezVousCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousCreateArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RendezVous.
     *     @param {RendezVousCreateManyArgs} args - Arguments to create many RendezVous.
     *     @example
     *     // Create many RendezVous
     *     const rendezVous = await prisma.rendezVous.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RendezVousCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RendezVous.
     * @param {RendezVousDeleteArgs} args - Arguments to delete one RendezVous.
     * @example
     * // Delete one RendezVous
     * const RendezVous = await prisma.rendezVous.delete({
     *   where: {
     *     // ... filter to delete one RendezVous
     *   }
     * })
     * 
    **/
    delete<T extends RendezVousDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousDeleteArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RendezVous.
     * @param {RendezVousUpdateArgs} args - Arguments to update one RendezVous.
     * @example
     * // Update one RendezVous
     * const rendezVous = await prisma.rendezVous.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RendezVousUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousUpdateArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RendezVous.
     * @param {RendezVousDeleteManyArgs} args - Arguments to filter RendezVous to delete.
     * @example
     * // Delete a few RendezVous
     * const { count } = await prisma.rendezVous.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RendezVousDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RendezVousDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RendezVous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RendezVous
     * const rendezVous = await prisma.rendezVous.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RendezVousUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RendezVous.
     * @param {RendezVousUpsertArgs} args - Arguments to update or create a RendezVous.
     * @example
     * // Update or create a RendezVous
     * const rendezVous = await prisma.rendezVous.upsert({
     *   create: {
     *     // ... data to create a RendezVous
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RendezVous we want to update
     *   }
     * })
    **/
    upsert<T extends RendezVousUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RendezVousUpsertArgs<ExtArgs>>
    ): Prisma__RendezVousClient<$Result.GetResult<Prisma.$RendezVousPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RendezVous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousCountArgs} args - Arguments to filter RendezVous to count.
     * @example
     * // Count the number of RendezVous
     * const count = await prisma.rendezVous.count({
     *   where: {
     *     // ... the filter for the RendezVous we want to count
     *   }
     * })
    **/
    count<T extends RendezVousCountArgs>(
      args?: Subset<T, RendezVousCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RendezVousCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RendezVous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RendezVousAggregateArgs>(args: Subset<T, RendezVousAggregateArgs>): Prisma.PrismaPromise<GetRendezVousAggregateType<T>>

    /**
     * Group by RendezVous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RendezVousGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RendezVousGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RendezVousGroupByArgs['orderBy'] }
        : { orderBy?: RendezVousGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RendezVousGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRendezVousGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RendezVous model
   */
  readonly fields: RendezVousFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RendezVous.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RendezVousClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CentreVax<T extends CentreVaxDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CentreVaxDefaultArgs<ExtArgs>>): Prisma__CentreVaxClient<$Result.GetResult<Prisma.$CentreVaxPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Parent<T extends ParentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParentDefaultArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Vaccin<T extends VaccinDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VaccinDefaultArgs<ExtArgs>>): Prisma__VaccinClient<$Result.GetResult<Prisma.$VaccinPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RendezVous model
   */ 
  interface RendezVousFieldRefs {
    readonly idR: FieldRef<"RendezVous", 'Int'>
    readonly dateR: FieldRef<"RendezVous", 'DateTime'>
    readonly statusR: FieldRef<"RendezVous", 'String'>
    readonly CentreVax_idC: FieldRef<"RendezVous", 'Int'>
    readonly Parent_idP: FieldRef<"RendezVous", 'Int'>
    readonly Vaccin_idV: FieldRef<"RendezVous", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RendezVous findUnique
   */
  export type RendezVousFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter, which RendezVous to fetch.
     */
    where: RendezVousWhereUniqueInput
  }

  /**
   * RendezVous findUniqueOrThrow
   */
  export type RendezVousFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter, which RendezVous to fetch.
     */
    where: RendezVousWhereUniqueInput
  }

  /**
   * RendezVous findFirst
   */
  export type RendezVousFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter, which RendezVous to fetch.
     */
    where?: RendezVousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RendezVous to fetch.
     */
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RendezVous.
     */
    cursor?: RendezVousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RendezVous from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RendezVous.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RendezVous.
     */
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * RendezVous findFirstOrThrow
   */
  export type RendezVousFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter, which RendezVous to fetch.
     */
    where?: RendezVousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RendezVous to fetch.
     */
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RendezVous.
     */
    cursor?: RendezVousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RendezVous from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RendezVous.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RendezVous.
     */
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * RendezVous findMany
   */
  export type RendezVousFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter, which RendezVous to fetch.
     */
    where?: RendezVousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RendezVous to fetch.
     */
    orderBy?: RendezVousOrderByWithRelationInput | RendezVousOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RendezVous.
     */
    cursor?: RendezVousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RendezVous from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RendezVous.
     */
    skip?: number
    distinct?: RendezVousScalarFieldEnum | RendezVousScalarFieldEnum[]
  }

  /**
   * RendezVous create
   */
  export type RendezVousCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * The data needed to create a RendezVous.
     */
    data: XOR<RendezVousCreateInput, RendezVousUncheckedCreateInput>
  }

  /**
   * RendezVous createMany
   */
  export type RendezVousCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RendezVous.
     */
    data: RendezVousCreateManyInput | RendezVousCreateManyInput[]
  }

  /**
   * RendezVous update
   */
  export type RendezVousUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * The data needed to update a RendezVous.
     */
    data: XOR<RendezVousUpdateInput, RendezVousUncheckedUpdateInput>
    /**
     * Choose, which RendezVous to update.
     */
    where: RendezVousWhereUniqueInput
  }

  /**
   * RendezVous updateMany
   */
  export type RendezVousUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RendezVous.
     */
    data: XOR<RendezVousUpdateManyMutationInput, RendezVousUncheckedUpdateManyInput>
    /**
     * Filter which RendezVous to update
     */
    where?: RendezVousWhereInput
  }

  /**
   * RendezVous upsert
   */
  export type RendezVousUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * The filter to search for the RendezVous to update in case it exists.
     */
    where: RendezVousWhereUniqueInput
    /**
     * In case the RendezVous found by the `where` argument doesn't exist, create a new RendezVous with this data.
     */
    create: XOR<RendezVousCreateInput, RendezVousUncheckedCreateInput>
    /**
     * In case the RendezVous was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RendezVousUpdateInput, RendezVousUncheckedUpdateInput>
  }

  /**
   * RendezVous delete
   */
  export type RendezVousDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
    /**
     * Filter which RendezVous to delete.
     */
    where: RendezVousWhereUniqueInput
  }

  /**
   * RendezVous deleteMany
   */
  export type RendezVousDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RendezVous to delete
     */
    where?: RendezVousWhereInput
  }

  /**
   * RendezVous without action
   */
  export type RendezVousDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RendezVous
     */
    select?: RendezVousSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RendezVousInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ParentScalarFieldEnum: {
    idP: 'idP',
    user_id: 'user_id',
    nomP: 'nomP',
    prenomP: 'prenomP',
    numTelP: 'numTelP',
    roleP: 'roleP',
    sexeP: 'sexeP'
  };

  export type ParentScalarFieldEnum = (typeof ParentScalarFieldEnum)[keyof typeof ParentScalarFieldEnum]


  export const CentreVaxScalarFieldEnum: {
    idC: 'idC',
    nomC: 'nomC',
    adresseC: 'adresseC',
    numTel: 'numTel'
  };

  export type CentreVaxScalarFieldEnum = (typeof CentreVaxScalarFieldEnum)[keyof typeof CentreVaxScalarFieldEnum]


  export const PersonnelMedicalScalarFieldEnum: {
    idPM: 'idPM',
    user_id: 'user_id',
    emailPM: 'emailPM',
    nomPM: 'nomPM',
    prenomPM: 'prenomPM',
    numTelPM: 'numTelPM',
    rolePM: 'rolePM',
    CentreVax_idC: 'CentreVax_idC'
  };

  export type PersonnelMedicalScalarFieldEnum = (typeof PersonnelMedicalScalarFieldEnum)[keyof typeof PersonnelMedicalScalarFieldEnum]


  export const EnfantScalarFieldEnum: {
    idE: 'idE',
    nomCompletE: 'nomCompletE',
    dateNaiss: 'dateNaiss',
    adresseE: 'adresseE',
    numSMI: 'numSMI',
    centreSante_idC: 'centreSante_idC',
    sexe: 'sexe',
    allergies: 'allergies',
    groupeSang: 'groupeSang',
    infoMedicaux: 'infoMedicaux',
    province: 'province',
    ville: 'ville',
    Parent_idP: 'Parent_idP'
  };

  export type EnfantScalarFieldEnum = (typeof EnfantScalarFieldEnum)[keyof typeof EnfantScalarFieldEnum]


  export const VaccinScalarFieldEnum: {
    idV: 'idV',
    nomV: 'nomV',
    descr: 'descr',
    EffetSecondaire: 'EffetSecondaire',
    ageRecommande: 'ageRecommande',
    doseV: 'doseV',
    abreviationV: 'abreviationV',
    maladieEvitable: 'maladieEvitable',
    Enfant_idE: 'Enfant_idE'
  };

  export type VaccinScalarFieldEnum = (typeof VaccinScalarFieldEnum)[keyof typeof VaccinScalarFieldEnum]


  export const RendezVousScalarFieldEnum: {
    idR: 'idR',
    dateR: 'dateR',
    statusR: 'statusR',
    CentreVax_idC: 'CentreVax_idC',
    Parent_idP: 'Parent_idP',
    Vaccin_idV: 'Vaccin_idV'
  };

  export type RendezVousScalarFieldEnum = (typeof RendezVousScalarFieldEnum)[keyof typeof RendezVousScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    Parent?: ParentListRelationFilter
    personnelsMedical?: PersonnelMedicalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    Parent?: ParentOrderByRelationAggregateInput
    personnelsMedical?: PersonnelMedicalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    Parent?: ParentListRelationFilter
    personnelsMedical?: PersonnelMedicalListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type ParentWhereInput = {
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    idP?: IntFilter<"Parent"> | number
    user_id?: IntFilter<"Parent"> | number
    nomP?: StringNullableFilter<"Parent"> | string | null
    prenomP?: StringNullableFilter<"Parent"> | string | null
    numTelP?: StringNullableFilter<"Parent"> | string | null
    roleP?: StringNullableFilter<"Parent"> | string | null
    sexeP?: StringFilter<"Parent"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    enfants?: EnfantListRelationFilter
    rendezVous?: RendezVousListRelationFilter
  }

  export type ParentOrderByWithRelationInput = {
    idP?: SortOrder
    user_id?: SortOrder
    nomP?: SortOrderInput | SortOrder
    prenomP?: SortOrderInput | SortOrder
    numTelP?: SortOrderInput | SortOrder
    roleP?: SortOrderInput | SortOrder
    sexeP?: SortOrder
    user?: UserOrderByWithRelationInput
    enfants?: EnfantOrderByRelationAggregateInput
    rendezVous?: RendezVousOrderByRelationAggregateInput
  }

  export type ParentWhereUniqueInput = Prisma.AtLeast<{
    idP?: number
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    user_id?: IntFilter<"Parent"> | number
    nomP?: StringNullableFilter<"Parent"> | string | null
    prenomP?: StringNullableFilter<"Parent"> | string | null
    numTelP?: StringNullableFilter<"Parent"> | string | null
    roleP?: StringNullableFilter<"Parent"> | string | null
    sexeP?: StringFilter<"Parent"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    enfants?: EnfantListRelationFilter
    rendezVous?: RendezVousListRelationFilter
  }, "idP">

  export type ParentOrderByWithAggregationInput = {
    idP?: SortOrder
    user_id?: SortOrder
    nomP?: SortOrderInput | SortOrder
    prenomP?: SortOrderInput | SortOrder
    numTelP?: SortOrderInput | SortOrder
    roleP?: SortOrderInput | SortOrder
    sexeP?: SortOrder
    _count?: ParentCountOrderByAggregateInput
    _avg?: ParentAvgOrderByAggregateInput
    _max?: ParentMaxOrderByAggregateInput
    _min?: ParentMinOrderByAggregateInput
    _sum?: ParentSumOrderByAggregateInput
  }

  export type ParentScalarWhereWithAggregatesInput = {
    AND?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    OR?: ParentScalarWhereWithAggregatesInput[]
    NOT?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    idP?: IntWithAggregatesFilter<"Parent"> | number
    user_id?: IntWithAggregatesFilter<"Parent"> | number
    nomP?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    prenomP?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    numTelP?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    roleP?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    sexeP?: StringWithAggregatesFilter<"Parent"> | string
  }

  export type CentreVaxWhereInput = {
    AND?: CentreVaxWhereInput | CentreVaxWhereInput[]
    OR?: CentreVaxWhereInput[]
    NOT?: CentreVaxWhereInput | CentreVaxWhereInput[]
    idC?: IntFilter<"CentreVax"> | number
    nomC?: StringNullableFilter<"CentreVax"> | string | null
    adresseC?: StringNullableFilter<"CentreVax"> | string | null
    numTel?: IntNullableFilter<"CentreVax"> | number | null
    personnelsMedical?: PersonnelMedicalListRelationFilter
    enfants?: EnfantListRelationFilter
    rendezVous?: RendezVousListRelationFilter
  }

  export type CentreVaxOrderByWithRelationInput = {
    idC?: SortOrder
    nomC?: SortOrderInput | SortOrder
    adresseC?: SortOrderInput | SortOrder
    numTel?: SortOrderInput | SortOrder
    personnelsMedical?: PersonnelMedicalOrderByRelationAggregateInput
    enfants?: EnfantOrderByRelationAggregateInput
    rendezVous?: RendezVousOrderByRelationAggregateInput
  }

  export type CentreVaxWhereUniqueInput = Prisma.AtLeast<{
    idC?: number
    AND?: CentreVaxWhereInput | CentreVaxWhereInput[]
    OR?: CentreVaxWhereInput[]
    NOT?: CentreVaxWhereInput | CentreVaxWhereInput[]
    nomC?: StringNullableFilter<"CentreVax"> | string | null
    adresseC?: StringNullableFilter<"CentreVax"> | string | null
    numTel?: IntNullableFilter<"CentreVax"> | number | null
    personnelsMedical?: PersonnelMedicalListRelationFilter
    enfants?: EnfantListRelationFilter
    rendezVous?: RendezVousListRelationFilter
  }, "idC">

  export type CentreVaxOrderByWithAggregationInput = {
    idC?: SortOrder
    nomC?: SortOrderInput | SortOrder
    adresseC?: SortOrderInput | SortOrder
    numTel?: SortOrderInput | SortOrder
    _count?: CentreVaxCountOrderByAggregateInput
    _avg?: CentreVaxAvgOrderByAggregateInput
    _max?: CentreVaxMaxOrderByAggregateInput
    _min?: CentreVaxMinOrderByAggregateInput
    _sum?: CentreVaxSumOrderByAggregateInput
  }

  export type CentreVaxScalarWhereWithAggregatesInput = {
    AND?: CentreVaxScalarWhereWithAggregatesInput | CentreVaxScalarWhereWithAggregatesInput[]
    OR?: CentreVaxScalarWhereWithAggregatesInput[]
    NOT?: CentreVaxScalarWhereWithAggregatesInput | CentreVaxScalarWhereWithAggregatesInput[]
    idC?: IntWithAggregatesFilter<"CentreVax"> | number
    nomC?: StringNullableWithAggregatesFilter<"CentreVax"> | string | null
    adresseC?: StringNullableWithAggregatesFilter<"CentreVax"> | string | null
    numTel?: IntNullableWithAggregatesFilter<"CentreVax"> | number | null
  }

  export type PersonnelMedicalWhereInput = {
    AND?: PersonnelMedicalWhereInput | PersonnelMedicalWhereInput[]
    OR?: PersonnelMedicalWhereInput[]
    NOT?: PersonnelMedicalWhereInput | PersonnelMedicalWhereInput[]
    idPM?: IntFilter<"PersonnelMedical"> | number
    user_id?: IntFilter<"PersonnelMedical"> | number
    emailPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    nomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    prenomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    numTelPM?: IntNullableFilter<"PersonnelMedical"> | number | null
    rolePM?: StringNullableFilter<"PersonnelMedical"> | string | null
    CentreVax_idC?: IntFilter<"PersonnelMedical"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    CentreVax?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
  }

  export type PersonnelMedicalOrderByWithRelationInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    emailPM?: SortOrderInput | SortOrder
    nomPM?: SortOrderInput | SortOrder
    prenomPM?: SortOrderInput | SortOrder
    numTelPM?: SortOrderInput | SortOrder
    rolePM?: SortOrderInput | SortOrder
    CentreVax_idC?: SortOrder
    user?: UserOrderByWithRelationInput
    CentreVax?: CentreVaxOrderByWithRelationInput
  }

  export type PersonnelMedicalWhereUniqueInput = Prisma.AtLeast<{
    idPM?: number
    AND?: PersonnelMedicalWhereInput | PersonnelMedicalWhereInput[]
    OR?: PersonnelMedicalWhereInput[]
    NOT?: PersonnelMedicalWhereInput | PersonnelMedicalWhereInput[]
    user_id?: IntFilter<"PersonnelMedical"> | number
    emailPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    nomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    prenomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    numTelPM?: IntNullableFilter<"PersonnelMedical"> | number | null
    rolePM?: StringNullableFilter<"PersonnelMedical"> | string | null
    CentreVax_idC?: IntFilter<"PersonnelMedical"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    CentreVax?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
  }, "idPM">

  export type PersonnelMedicalOrderByWithAggregationInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    emailPM?: SortOrderInput | SortOrder
    nomPM?: SortOrderInput | SortOrder
    prenomPM?: SortOrderInput | SortOrder
    numTelPM?: SortOrderInput | SortOrder
    rolePM?: SortOrderInput | SortOrder
    CentreVax_idC?: SortOrder
    _count?: PersonnelMedicalCountOrderByAggregateInput
    _avg?: PersonnelMedicalAvgOrderByAggregateInput
    _max?: PersonnelMedicalMaxOrderByAggregateInput
    _min?: PersonnelMedicalMinOrderByAggregateInput
    _sum?: PersonnelMedicalSumOrderByAggregateInput
  }

  export type PersonnelMedicalScalarWhereWithAggregatesInput = {
    AND?: PersonnelMedicalScalarWhereWithAggregatesInput | PersonnelMedicalScalarWhereWithAggregatesInput[]
    OR?: PersonnelMedicalScalarWhereWithAggregatesInput[]
    NOT?: PersonnelMedicalScalarWhereWithAggregatesInput | PersonnelMedicalScalarWhereWithAggregatesInput[]
    idPM?: IntWithAggregatesFilter<"PersonnelMedical"> | number
    user_id?: IntWithAggregatesFilter<"PersonnelMedical"> | number
    emailPM?: StringNullableWithAggregatesFilter<"PersonnelMedical"> | string | null
    nomPM?: StringNullableWithAggregatesFilter<"PersonnelMedical"> | string | null
    prenomPM?: StringNullableWithAggregatesFilter<"PersonnelMedical"> | string | null
    numTelPM?: IntNullableWithAggregatesFilter<"PersonnelMedical"> | number | null
    rolePM?: StringNullableWithAggregatesFilter<"PersonnelMedical"> | string | null
    CentreVax_idC?: IntWithAggregatesFilter<"PersonnelMedical"> | number
  }

  export type EnfantWhereInput = {
    AND?: EnfantWhereInput | EnfantWhereInput[]
    OR?: EnfantWhereInput[]
    NOT?: EnfantWhereInput | EnfantWhereInput[]
    idE?: IntFilter<"Enfant"> | number
    nomCompletE?: StringFilter<"Enfant"> | string
    dateNaiss?: DateTimeNullableFilter<"Enfant"> | Date | string | null
    adresseE?: StringNullableFilter<"Enfant"> | string | null
    numSMI?: StringFilter<"Enfant"> | string
    centreSante_idC?: IntFilter<"Enfant"> | number
    sexe?: StringFilter<"Enfant"> | string
    allergies?: StringNullableFilter<"Enfant"> | string | null
    groupeSang?: StringNullableFilter<"Enfant"> | string | null
    infoMedicaux?: StringNullableFilter<"Enfant"> | string | null
    province?: StringNullableFilter<"Enfant"> | string | null
    ville?: StringNullableFilter<"Enfant"> | string | null
    Parent_idP?: IntFilter<"Enfant"> | number
    centreSante?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
    Parent?: XOR<ParentRelationFilter, ParentWhereInput>
    vaccins?: VaccinListRelationFilter
  }

  export type EnfantOrderByWithRelationInput = {
    idE?: SortOrder
    nomCompletE?: SortOrder
    dateNaiss?: SortOrderInput | SortOrder
    adresseE?: SortOrderInput | SortOrder
    numSMI?: SortOrder
    centreSante_idC?: SortOrder
    sexe?: SortOrder
    allergies?: SortOrderInput | SortOrder
    groupeSang?: SortOrderInput | SortOrder
    infoMedicaux?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    ville?: SortOrderInput | SortOrder
    Parent_idP?: SortOrder
    centreSante?: CentreVaxOrderByWithRelationInput
    Parent?: ParentOrderByWithRelationInput
    vaccins?: VaccinOrderByRelationAggregateInput
  }

  export type EnfantWhereUniqueInput = Prisma.AtLeast<{
    idE?: number
    numSMI?: string
    AND?: EnfantWhereInput | EnfantWhereInput[]
    OR?: EnfantWhereInput[]
    NOT?: EnfantWhereInput | EnfantWhereInput[]
    nomCompletE?: StringFilter<"Enfant"> | string
    dateNaiss?: DateTimeNullableFilter<"Enfant"> | Date | string | null
    adresseE?: StringNullableFilter<"Enfant"> | string | null
    centreSante_idC?: IntFilter<"Enfant"> | number
    sexe?: StringFilter<"Enfant"> | string
    allergies?: StringNullableFilter<"Enfant"> | string | null
    groupeSang?: StringNullableFilter<"Enfant"> | string | null
    infoMedicaux?: StringNullableFilter<"Enfant"> | string | null
    province?: StringNullableFilter<"Enfant"> | string | null
    ville?: StringNullableFilter<"Enfant"> | string | null
    Parent_idP?: IntFilter<"Enfant"> | number
    centreSante?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
    Parent?: XOR<ParentRelationFilter, ParentWhereInput>
    vaccins?: VaccinListRelationFilter
  }, "idE" | "numSMI">

  export type EnfantOrderByWithAggregationInput = {
    idE?: SortOrder
    nomCompletE?: SortOrder
    dateNaiss?: SortOrderInput | SortOrder
    adresseE?: SortOrderInput | SortOrder
    numSMI?: SortOrder
    centreSante_idC?: SortOrder
    sexe?: SortOrder
    allergies?: SortOrderInput | SortOrder
    groupeSang?: SortOrderInput | SortOrder
    infoMedicaux?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    ville?: SortOrderInput | SortOrder
    Parent_idP?: SortOrder
    _count?: EnfantCountOrderByAggregateInput
    _avg?: EnfantAvgOrderByAggregateInput
    _max?: EnfantMaxOrderByAggregateInput
    _min?: EnfantMinOrderByAggregateInput
    _sum?: EnfantSumOrderByAggregateInput
  }

  export type EnfantScalarWhereWithAggregatesInput = {
    AND?: EnfantScalarWhereWithAggregatesInput | EnfantScalarWhereWithAggregatesInput[]
    OR?: EnfantScalarWhereWithAggregatesInput[]
    NOT?: EnfantScalarWhereWithAggregatesInput | EnfantScalarWhereWithAggregatesInput[]
    idE?: IntWithAggregatesFilter<"Enfant"> | number
    nomCompletE?: StringWithAggregatesFilter<"Enfant"> | string
    dateNaiss?: DateTimeNullableWithAggregatesFilter<"Enfant"> | Date | string | null
    adresseE?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    numSMI?: StringWithAggregatesFilter<"Enfant"> | string
    centreSante_idC?: IntWithAggregatesFilter<"Enfant"> | number
    sexe?: StringWithAggregatesFilter<"Enfant"> | string
    allergies?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    groupeSang?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    infoMedicaux?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    province?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    ville?: StringNullableWithAggregatesFilter<"Enfant"> | string | null
    Parent_idP?: IntWithAggregatesFilter<"Enfant"> | number
  }

  export type VaccinWhereInput = {
    AND?: VaccinWhereInput | VaccinWhereInput[]
    OR?: VaccinWhereInput[]
    NOT?: VaccinWhereInput | VaccinWhereInput[]
    idV?: IntFilter<"Vaccin"> | number
    nomV?: StringFilter<"Vaccin"> | string
    descr?: StringNullableFilter<"Vaccin"> | string | null
    EffetSecondaire?: StringNullableFilter<"Vaccin"> | string | null
    ageRecommande?: IntNullableFilter<"Vaccin"> | number | null
    doseV?: StringNullableFilter<"Vaccin"> | string | null
    abreviationV?: StringNullableFilter<"Vaccin"> | string | null
    maladieEvitable?: StringNullableFilter<"Vaccin"> | string | null
    Enfant_idE?: IntFilter<"Vaccin"> | number
    enfant?: XOR<EnfantRelationFilter, EnfantWhereInput>
    rendezVous?: RendezVousListRelationFilter
  }

  export type VaccinOrderByWithRelationInput = {
    idV?: SortOrder
    nomV?: SortOrder
    descr?: SortOrderInput | SortOrder
    EffetSecondaire?: SortOrderInput | SortOrder
    ageRecommande?: SortOrderInput | SortOrder
    doseV?: SortOrderInput | SortOrder
    abreviationV?: SortOrderInput | SortOrder
    maladieEvitable?: SortOrderInput | SortOrder
    Enfant_idE?: SortOrder
    enfant?: EnfantOrderByWithRelationInput
    rendezVous?: RendezVousOrderByRelationAggregateInput
  }

  export type VaccinWhereUniqueInput = Prisma.AtLeast<{
    idV?: number
    nomV?: string
    AND?: VaccinWhereInput | VaccinWhereInput[]
    OR?: VaccinWhereInput[]
    NOT?: VaccinWhereInput | VaccinWhereInput[]
    descr?: StringNullableFilter<"Vaccin"> | string | null
    EffetSecondaire?: StringNullableFilter<"Vaccin"> | string | null
    ageRecommande?: IntNullableFilter<"Vaccin"> | number | null
    doseV?: StringNullableFilter<"Vaccin"> | string | null
    abreviationV?: StringNullableFilter<"Vaccin"> | string | null
    maladieEvitable?: StringNullableFilter<"Vaccin"> | string | null
    Enfant_idE?: IntFilter<"Vaccin"> | number
    enfant?: XOR<EnfantRelationFilter, EnfantWhereInput>
    rendezVous?: RendezVousListRelationFilter
  }, "idV" | "nomV">

  export type VaccinOrderByWithAggregationInput = {
    idV?: SortOrder
    nomV?: SortOrder
    descr?: SortOrderInput | SortOrder
    EffetSecondaire?: SortOrderInput | SortOrder
    ageRecommande?: SortOrderInput | SortOrder
    doseV?: SortOrderInput | SortOrder
    abreviationV?: SortOrderInput | SortOrder
    maladieEvitable?: SortOrderInput | SortOrder
    Enfant_idE?: SortOrder
    _count?: VaccinCountOrderByAggregateInput
    _avg?: VaccinAvgOrderByAggregateInput
    _max?: VaccinMaxOrderByAggregateInput
    _min?: VaccinMinOrderByAggregateInput
    _sum?: VaccinSumOrderByAggregateInput
  }

  export type VaccinScalarWhereWithAggregatesInput = {
    AND?: VaccinScalarWhereWithAggregatesInput | VaccinScalarWhereWithAggregatesInput[]
    OR?: VaccinScalarWhereWithAggregatesInput[]
    NOT?: VaccinScalarWhereWithAggregatesInput | VaccinScalarWhereWithAggregatesInput[]
    idV?: IntWithAggregatesFilter<"Vaccin"> | number
    nomV?: StringWithAggregatesFilter<"Vaccin"> | string
    descr?: StringNullableWithAggregatesFilter<"Vaccin"> | string | null
    EffetSecondaire?: StringNullableWithAggregatesFilter<"Vaccin"> | string | null
    ageRecommande?: IntNullableWithAggregatesFilter<"Vaccin"> | number | null
    doseV?: StringNullableWithAggregatesFilter<"Vaccin"> | string | null
    abreviationV?: StringNullableWithAggregatesFilter<"Vaccin"> | string | null
    maladieEvitable?: StringNullableWithAggregatesFilter<"Vaccin"> | string | null
    Enfant_idE?: IntWithAggregatesFilter<"Vaccin"> | number
  }

  export type RendezVousWhereInput = {
    AND?: RendezVousWhereInput | RendezVousWhereInput[]
    OR?: RendezVousWhereInput[]
    NOT?: RendezVousWhereInput | RendezVousWhereInput[]
    idR?: IntFilter<"RendezVous"> | number
    dateR?: DateTimeNullableFilter<"RendezVous"> | Date | string | null
    statusR?: StringFilter<"RendezVous"> | string
    CentreVax_idC?: IntFilter<"RendezVous"> | number
    Parent_idP?: IntFilter<"RendezVous"> | number
    Vaccin_idV?: IntFilter<"RendezVous"> | number
    CentreVax?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
    Parent?: XOR<ParentRelationFilter, ParentWhereInput>
    Vaccin?: XOR<VaccinRelationFilter, VaccinWhereInput>
  }

  export type RendezVousOrderByWithRelationInput = {
    idR?: SortOrder
    dateR?: SortOrderInput | SortOrder
    statusR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
    CentreVax?: CentreVaxOrderByWithRelationInput
    Parent?: ParentOrderByWithRelationInput
    Vaccin?: VaccinOrderByWithRelationInput
  }

  export type RendezVousWhereUniqueInput = Prisma.AtLeast<{
    idR?: number
    AND?: RendezVousWhereInput | RendezVousWhereInput[]
    OR?: RendezVousWhereInput[]
    NOT?: RendezVousWhereInput | RendezVousWhereInput[]
    dateR?: DateTimeNullableFilter<"RendezVous"> | Date | string | null
    statusR?: StringFilter<"RendezVous"> | string
    CentreVax_idC?: IntFilter<"RendezVous"> | number
    Parent_idP?: IntFilter<"RendezVous"> | number
    Vaccin_idV?: IntFilter<"RendezVous"> | number
    CentreVax?: XOR<CentreVaxRelationFilter, CentreVaxWhereInput>
    Parent?: XOR<ParentRelationFilter, ParentWhereInput>
    Vaccin?: XOR<VaccinRelationFilter, VaccinWhereInput>
  }, "idR">

  export type RendezVousOrderByWithAggregationInput = {
    idR?: SortOrder
    dateR?: SortOrderInput | SortOrder
    statusR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
    _count?: RendezVousCountOrderByAggregateInput
    _avg?: RendezVousAvgOrderByAggregateInput
    _max?: RendezVousMaxOrderByAggregateInput
    _min?: RendezVousMinOrderByAggregateInput
    _sum?: RendezVousSumOrderByAggregateInput
  }

  export type RendezVousScalarWhereWithAggregatesInput = {
    AND?: RendezVousScalarWhereWithAggregatesInput | RendezVousScalarWhereWithAggregatesInput[]
    OR?: RendezVousScalarWhereWithAggregatesInput[]
    NOT?: RendezVousScalarWhereWithAggregatesInput | RendezVousScalarWhereWithAggregatesInput[]
    idR?: IntWithAggregatesFilter<"RendezVous"> | number
    dateR?: DateTimeNullableWithAggregatesFilter<"RendezVous"> | Date | string | null
    statusR?: StringWithAggregatesFilter<"RendezVous"> | string
    CentreVax_idC?: IntWithAggregatesFilter<"RendezVous"> | number
    Parent_idP?: IntWithAggregatesFilter<"RendezVous"> | number
    Vaccin_idV?: IntWithAggregatesFilter<"RendezVous"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: string
    Parent?: ParentCreateNestedManyWithoutUserInput
    personnelsMedical?: PersonnelMedicalCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: string
    Parent?: ParentUncheckedCreateNestedManyWithoutUserInput
    personnelsMedical?: PersonnelMedicalUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    Parent?: ParentUpdateManyWithoutUserNestedInput
    personnelsMedical?: PersonnelMedicalUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    Parent?: ParentUncheckedUpdateManyWithoutUserNestedInput
    personnelsMedical?: PersonnelMedicalUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    role: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ParentCreateInput = {
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    user: UserCreateNestedOneWithoutParentInput
    enfants?: EnfantCreateNestedManyWithoutParentInput
    rendezVous?: RendezVousCreateNestedManyWithoutParentInput
  }

  export type ParentUncheckedCreateInput = {
    idP?: number
    user_id: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    enfants?: EnfantUncheckedCreateNestedManyWithoutParentInput
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentUpdateInput = {
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutParentNestedInput
    enfants?: EnfantUpdateManyWithoutParentNestedInput
    rendezVous?: RendezVousUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateInput = {
    idP?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    enfants?: EnfantUncheckedUpdateManyWithoutParentNestedInput
    rendezVous?: RendezVousUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ParentCreateManyInput = {
    idP?: number
    user_id: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
  }

  export type ParentUpdateManyMutationInput = {
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
  }

  export type ParentUncheckedUpdateManyInput = {
    idP?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
  }

  export type CentreVaxCreateInput = {
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalCreateNestedManyWithoutCentreVaxInput
    enfants?: EnfantCreateNestedManyWithoutCentreSanteInput
    rendezVous?: RendezVousCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxUncheckedCreateInput = {
    idC?: number
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalUncheckedCreateNestedManyWithoutCentreVaxInput
    enfants?: EnfantUncheckedCreateNestedManyWithoutCentreSanteInput
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxUpdateInput = {
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUpdateManyWithoutCentreVaxNestedInput
    enfants?: EnfantUpdateManyWithoutCentreSanteNestedInput
    rendezVous?: RendezVousUpdateManyWithoutCentreVaxNestedInput
  }

  export type CentreVaxUncheckedUpdateInput = {
    idC?: IntFieldUpdateOperationsInput | number
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxNestedInput
    enfants?: EnfantUncheckedUpdateManyWithoutCentreSanteNestedInput
    rendezVous?: RendezVousUncheckedUpdateManyWithoutCentreVaxNestedInput
  }

  export type CentreVaxCreateManyInput = {
    idC?: number
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
  }

  export type CentreVaxUpdateManyMutationInput = {
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CentreVaxUncheckedUpdateManyInput = {
    idC?: IntFieldUpdateOperationsInput | number
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonnelMedicalCreateInput = {
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    user: UserCreateNestedOneWithoutPersonnelsMedicalInput
    CentreVax: CentreVaxCreateNestedOneWithoutPersonnelsMedicalInput
  }

  export type PersonnelMedicalUncheckedCreateInput = {
    idPM?: number
    user_id: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    CentreVax_idC: number
  }

  export type PersonnelMedicalUpdateInput = {
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPersonnelsMedicalNestedInput
    CentreVax?: CentreVaxUpdateOneRequiredWithoutPersonnelsMedicalNestedInput
  }

  export type PersonnelMedicalUncheckedUpdateInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
  }

  export type PersonnelMedicalCreateManyInput = {
    idPM?: number
    user_id: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    CentreVax_idC: number
  }

  export type PersonnelMedicalUpdateManyMutationInput = {
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonnelMedicalUncheckedUpdateManyInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
  }

  export type EnfantCreateInput = {
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    centreSante: CentreVaxCreateNestedOneWithoutEnfantsInput
    Parent: ParentCreateNestedOneWithoutEnfantsInput
    vaccins?: VaccinCreateNestedManyWithoutEnfantInput
  }

  export type EnfantUncheckedCreateInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent_idP: number
    vaccins?: VaccinUncheckedCreateNestedManyWithoutEnfantInput
  }

  export type EnfantUpdateInput = {
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    centreSante?: CentreVaxUpdateOneRequiredWithoutEnfantsNestedInput
    Parent?: ParentUpdateOneRequiredWithoutEnfantsNestedInput
    vaccins?: VaccinUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantUncheckedUpdateInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    centreSante_idC?: IntFieldUpdateOperationsInput | number
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent_idP?: IntFieldUpdateOperationsInput | number
    vaccins?: VaccinUncheckedUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantCreateManyInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent_idP: number
  }

  export type EnfantUpdateManyMutationInput = {
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnfantUncheckedUpdateManyInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    centreSante_idC?: IntFieldUpdateOperationsInput | number
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent_idP?: IntFieldUpdateOperationsInput | number
  }

  export type VaccinCreateInput = {
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    enfant: EnfantCreateNestedOneWithoutVaccinsInput
    rendezVous?: RendezVousCreateNestedManyWithoutVaccinInput
  }

  export type VaccinUncheckedCreateInput = {
    idV?: number
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    Enfant_idE: number
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutVaccinInput
  }

  export type VaccinUpdateInput = {
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    enfant?: EnfantUpdateOneRequiredWithoutVaccinsNestedInput
    rendezVous?: RendezVousUpdateManyWithoutVaccinNestedInput
  }

  export type VaccinUncheckedUpdateInput = {
    idV?: IntFieldUpdateOperationsInput | number
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    Enfant_idE?: IntFieldUpdateOperationsInput | number
    rendezVous?: RendezVousUncheckedUpdateManyWithoutVaccinNestedInput
  }

  export type VaccinCreateManyInput = {
    idV?: number
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    Enfant_idE: number
  }

  export type VaccinUpdateManyMutationInput = {
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VaccinUncheckedUpdateManyInput = {
    idV?: IntFieldUpdateOperationsInput | number
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    Enfant_idE?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousCreateInput = {
    dateR?: Date | string | null
    statusR: string
    CentreVax: CentreVaxCreateNestedOneWithoutRendezVousInput
    Parent: ParentCreateNestedOneWithoutRendezVousInput
    Vaccin: VaccinCreateNestedOneWithoutRendezVousInput
  }

  export type RendezVousUncheckedCreateInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Parent_idP: number
    Vaccin_idV: number
  }

  export type RendezVousUpdateInput = {
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax?: CentreVaxUpdateOneRequiredWithoutRendezVousNestedInput
    Parent?: ParentUpdateOneRequiredWithoutRendezVousNestedInput
    Vaccin?: VaccinUpdateOneRequiredWithoutRendezVousNestedInput
  }

  export type RendezVousUncheckedUpdateInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Parent_idP?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousCreateManyInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Parent_idP: number
    Vaccin_idV: number
  }

  export type RendezVousUpdateManyMutationInput = {
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
  }

  export type RendezVousUncheckedUpdateManyInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Parent_idP?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ParentListRelationFilter = {
    every?: ParentWhereInput
    some?: ParentWhereInput
    none?: ParentWhereInput
  }

  export type PersonnelMedicalListRelationFilter = {
    every?: PersonnelMedicalWhereInput
    some?: PersonnelMedicalWhereInput
    none?: PersonnelMedicalWhereInput
  }

  export type ParentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonnelMedicalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EnfantListRelationFilter = {
    every?: EnfantWhereInput
    some?: EnfantWhereInput
    none?: EnfantWhereInput
  }

  export type RendezVousListRelationFilter = {
    every?: RendezVousWhereInput
    some?: RendezVousWhereInput
    none?: RendezVousWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnfantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RendezVousOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParentCountOrderByAggregateInput = {
    idP?: SortOrder
    user_id?: SortOrder
    nomP?: SortOrder
    prenomP?: SortOrder
    numTelP?: SortOrder
    roleP?: SortOrder
    sexeP?: SortOrder
  }

  export type ParentAvgOrderByAggregateInput = {
    idP?: SortOrder
    user_id?: SortOrder
  }

  export type ParentMaxOrderByAggregateInput = {
    idP?: SortOrder
    user_id?: SortOrder
    nomP?: SortOrder
    prenomP?: SortOrder
    numTelP?: SortOrder
    roleP?: SortOrder
    sexeP?: SortOrder
  }

  export type ParentMinOrderByAggregateInput = {
    idP?: SortOrder
    user_id?: SortOrder
    nomP?: SortOrder
    prenomP?: SortOrder
    numTelP?: SortOrder
    roleP?: SortOrder
    sexeP?: SortOrder
  }

  export type ParentSumOrderByAggregateInput = {
    idP?: SortOrder
    user_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CentreVaxCountOrderByAggregateInput = {
    idC?: SortOrder
    nomC?: SortOrder
    adresseC?: SortOrder
    numTel?: SortOrder
  }

  export type CentreVaxAvgOrderByAggregateInput = {
    idC?: SortOrder
    numTel?: SortOrder
  }

  export type CentreVaxMaxOrderByAggregateInput = {
    idC?: SortOrder
    nomC?: SortOrder
    adresseC?: SortOrder
    numTel?: SortOrder
  }

  export type CentreVaxMinOrderByAggregateInput = {
    idC?: SortOrder
    nomC?: SortOrder
    adresseC?: SortOrder
    numTel?: SortOrder
  }

  export type CentreVaxSumOrderByAggregateInput = {
    idC?: SortOrder
    numTel?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CentreVaxRelationFilter = {
    is?: CentreVaxWhereInput
    isNot?: CentreVaxWhereInput
  }

  export type PersonnelMedicalCountOrderByAggregateInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    emailPM?: SortOrder
    nomPM?: SortOrder
    prenomPM?: SortOrder
    numTelPM?: SortOrder
    rolePM?: SortOrder
    CentreVax_idC?: SortOrder
  }

  export type PersonnelMedicalAvgOrderByAggregateInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    numTelPM?: SortOrder
    CentreVax_idC?: SortOrder
  }

  export type PersonnelMedicalMaxOrderByAggregateInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    emailPM?: SortOrder
    nomPM?: SortOrder
    prenomPM?: SortOrder
    numTelPM?: SortOrder
    rolePM?: SortOrder
    CentreVax_idC?: SortOrder
  }

  export type PersonnelMedicalMinOrderByAggregateInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    emailPM?: SortOrder
    nomPM?: SortOrder
    prenomPM?: SortOrder
    numTelPM?: SortOrder
    rolePM?: SortOrder
    CentreVax_idC?: SortOrder
  }

  export type PersonnelMedicalSumOrderByAggregateInput = {
    idPM?: SortOrder
    user_id?: SortOrder
    numTelPM?: SortOrder
    CentreVax_idC?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ParentRelationFilter = {
    is?: ParentWhereInput
    isNot?: ParentWhereInput
  }

  export type VaccinListRelationFilter = {
    every?: VaccinWhereInput
    some?: VaccinWhereInput
    none?: VaccinWhereInput
  }

  export type VaccinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnfantCountOrderByAggregateInput = {
    idE?: SortOrder
    nomCompletE?: SortOrder
    dateNaiss?: SortOrder
    adresseE?: SortOrder
    numSMI?: SortOrder
    centreSante_idC?: SortOrder
    sexe?: SortOrder
    allergies?: SortOrder
    groupeSang?: SortOrder
    infoMedicaux?: SortOrder
    province?: SortOrder
    ville?: SortOrder
    Parent_idP?: SortOrder
  }

  export type EnfantAvgOrderByAggregateInput = {
    idE?: SortOrder
    centreSante_idC?: SortOrder
    Parent_idP?: SortOrder
  }

  export type EnfantMaxOrderByAggregateInput = {
    idE?: SortOrder
    nomCompletE?: SortOrder
    dateNaiss?: SortOrder
    adresseE?: SortOrder
    numSMI?: SortOrder
    centreSante_idC?: SortOrder
    sexe?: SortOrder
    allergies?: SortOrder
    groupeSang?: SortOrder
    infoMedicaux?: SortOrder
    province?: SortOrder
    ville?: SortOrder
    Parent_idP?: SortOrder
  }

  export type EnfantMinOrderByAggregateInput = {
    idE?: SortOrder
    nomCompletE?: SortOrder
    dateNaiss?: SortOrder
    adresseE?: SortOrder
    numSMI?: SortOrder
    centreSante_idC?: SortOrder
    sexe?: SortOrder
    allergies?: SortOrder
    groupeSang?: SortOrder
    infoMedicaux?: SortOrder
    province?: SortOrder
    ville?: SortOrder
    Parent_idP?: SortOrder
  }

  export type EnfantSumOrderByAggregateInput = {
    idE?: SortOrder
    centreSante_idC?: SortOrder
    Parent_idP?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnfantRelationFilter = {
    is?: EnfantWhereInput
    isNot?: EnfantWhereInput
  }

  export type VaccinCountOrderByAggregateInput = {
    idV?: SortOrder
    nomV?: SortOrder
    descr?: SortOrder
    EffetSecondaire?: SortOrder
    ageRecommande?: SortOrder
    doseV?: SortOrder
    abreviationV?: SortOrder
    maladieEvitable?: SortOrder
    Enfant_idE?: SortOrder
  }

  export type VaccinAvgOrderByAggregateInput = {
    idV?: SortOrder
    ageRecommande?: SortOrder
    Enfant_idE?: SortOrder
  }

  export type VaccinMaxOrderByAggregateInput = {
    idV?: SortOrder
    nomV?: SortOrder
    descr?: SortOrder
    EffetSecondaire?: SortOrder
    ageRecommande?: SortOrder
    doseV?: SortOrder
    abreviationV?: SortOrder
    maladieEvitable?: SortOrder
    Enfant_idE?: SortOrder
  }

  export type VaccinMinOrderByAggregateInput = {
    idV?: SortOrder
    nomV?: SortOrder
    descr?: SortOrder
    EffetSecondaire?: SortOrder
    ageRecommande?: SortOrder
    doseV?: SortOrder
    abreviationV?: SortOrder
    maladieEvitable?: SortOrder
    Enfant_idE?: SortOrder
  }

  export type VaccinSumOrderByAggregateInput = {
    idV?: SortOrder
    ageRecommande?: SortOrder
    Enfant_idE?: SortOrder
  }

  export type VaccinRelationFilter = {
    is?: VaccinWhereInput
    isNot?: VaccinWhereInput
  }

  export type RendezVousCountOrderByAggregateInput = {
    idR?: SortOrder
    dateR?: SortOrder
    statusR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
  }

  export type RendezVousAvgOrderByAggregateInput = {
    idR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
  }

  export type RendezVousMaxOrderByAggregateInput = {
    idR?: SortOrder
    dateR?: SortOrder
    statusR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
  }

  export type RendezVousMinOrderByAggregateInput = {
    idR?: SortOrder
    dateR?: SortOrder
    statusR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
  }

  export type RendezVousSumOrderByAggregateInput = {
    idR?: SortOrder
    CentreVax_idC?: SortOrder
    Parent_idP?: SortOrder
    Vaccin_idV?: SortOrder
  }

  export type ParentCreateNestedManyWithoutUserInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput> | ParentCreateWithoutUserInput[] | ParentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput | ParentCreateOrConnectWithoutUserInput[]
    createMany?: ParentCreateManyUserInputEnvelope
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
  }

  export type PersonnelMedicalCreateNestedManyWithoutUserInput = {
    create?: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput> | PersonnelMedicalCreateWithoutUserInput[] | PersonnelMedicalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutUserInput | PersonnelMedicalCreateOrConnectWithoutUserInput[]
    createMany?: PersonnelMedicalCreateManyUserInputEnvelope
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
  }

  export type ParentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput> | ParentCreateWithoutUserInput[] | ParentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput | ParentCreateOrConnectWithoutUserInput[]
    createMany?: ParentCreateManyUserInputEnvelope
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
  }

  export type PersonnelMedicalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput> | PersonnelMedicalCreateWithoutUserInput[] | PersonnelMedicalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutUserInput | PersonnelMedicalCreateOrConnectWithoutUserInput[]
    createMany?: PersonnelMedicalCreateManyUserInputEnvelope
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ParentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput> | ParentCreateWithoutUserInput[] | ParentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput | ParentCreateOrConnectWithoutUserInput[]
    upsert?: ParentUpsertWithWhereUniqueWithoutUserInput | ParentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParentCreateManyUserInputEnvelope
    set?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    disconnect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    delete?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    update?: ParentUpdateWithWhereUniqueWithoutUserInput | ParentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParentUpdateManyWithWhereWithoutUserInput | ParentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParentScalarWhereInput | ParentScalarWhereInput[]
  }

  export type PersonnelMedicalUpdateManyWithoutUserNestedInput = {
    create?: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput> | PersonnelMedicalCreateWithoutUserInput[] | PersonnelMedicalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutUserInput | PersonnelMedicalCreateOrConnectWithoutUserInput[]
    upsert?: PersonnelMedicalUpsertWithWhereUniqueWithoutUserInput | PersonnelMedicalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PersonnelMedicalCreateManyUserInputEnvelope
    set?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    disconnect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    delete?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    update?: PersonnelMedicalUpdateWithWhereUniqueWithoutUserInput | PersonnelMedicalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PersonnelMedicalUpdateManyWithWhereWithoutUserInput | PersonnelMedicalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ParentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput> | ParentCreateWithoutUserInput[] | ParentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput | ParentCreateOrConnectWithoutUserInput[]
    upsert?: ParentUpsertWithWhereUniqueWithoutUserInput | ParentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParentCreateManyUserInputEnvelope
    set?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    disconnect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    delete?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    update?: ParentUpdateWithWhereUniqueWithoutUserInput | ParentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParentUpdateManyWithWhereWithoutUserInput | ParentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParentScalarWhereInput | ParentScalarWhereInput[]
  }

  export type PersonnelMedicalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput> | PersonnelMedicalCreateWithoutUserInput[] | PersonnelMedicalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutUserInput | PersonnelMedicalCreateOrConnectWithoutUserInput[]
    upsert?: PersonnelMedicalUpsertWithWhereUniqueWithoutUserInput | PersonnelMedicalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PersonnelMedicalCreateManyUserInputEnvelope
    set?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    disconnect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    delete?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    update?: PersonnelMedicalUpdateWithWhereUniqueWithoutUserInput | PersonnelMedicalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PersonnelMedicalUpdateManyWithWhereWithoutUserInput | PersonnelMedicalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutParentInput = {
    create?: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    connectOrCreate?: UserCreateOrConnectWithoutParentInput
    connect?: UserWhereUniqueInput
  }

  export type EnfantCreateNestedManyWithoutParentInput = {
    create?: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput> | EnfantCreateWithoutParentInput[] | EnfantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutParentInput | EnfantCreateOrConnectWithoutParentInput[]
    createMany?: EnfantCreateManyParentInputEnvelope
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
  }

  export type RendezVousCreateNestedManyWithoutParentInput = {
    create?: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput> | RendezVousCreateWithoutParentInput[] | RendezVousUncheckedCreateWithoutParentInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutParentInput | RendezVousCreateOrConnectWithoutParentInput[]
    createMany?: RendezVousCreateManyParentInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type EnfantUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput> | EnfantCreateWithoutParentInput[] | EnfantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutParentInput | EnfantCreateOrConnectWithoutParentInput[]
    createMany?: EnfantCreateManyParentInputEnvelope
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
  }

  export type RendezVousUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput> | RendezVousCreateWithoutParentInput[] | RendezVousUncheckedCreateWithoutParentInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutParentInput | RendezVousCreateOrConnectWithoutParentInput[]
    createMany?: RendezVousCreateManyParentInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutParentNestedInput = {
    create?: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    connectOrCreate?: UserCreateOrConnectWithoutParentInput
    upsert?: UserUpsertWithoutParentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParentInput, UserUpdateWithoutParentInput>, UserUncheckedUpdateWithoutParentInput>
  }

  export type EnfantUpdateManyWithoutParentNestedInput = {
    create?: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput> | EnfantCreateWithoutParentInput[] | EnfantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutParentInput | EnfantCreateOrConnectWithoutParentInput[]
    upsert?: EnfantUpsertWithWhereUniqueWithoutParentInput | EnfantUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: EnfantCreateManyParentInputEnvelope
    set?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    disconnect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    delete?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    update?: EnfantUpdateWithWhereUniqueWithoutParentInput | EnfantUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: EnfantUpdateManyWithWhereWithoutParentInput | EnfantUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
  }

  export type RendezVousUpdateManyWithoutParentNestedInput = {
    create?: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput> | RendezVousCreateWithoutParentInput[] | RendezVousUncheckedCreateWithoutParentInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutParentInput | RendezVousCreateOrConnectWithoutParentInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutParentInput | RendezVousUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: RendezVousCreateManyParentInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutParentInput | RendezVousUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutParentInput | RendezVousUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type EnfantUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput> | EnfantCreateWithoutParentInput[] | EnfantUncheckedCreateWithoutParentInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutParentInput | EnfantCreateOrConnectWithoutParentInput[]
    upsert?: EnfantUpsertWithWhereUniqueWithoutParentInput | EnfantUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: EnfantCreateManyParentInputEnvelope
    set?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    disconnect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    delete?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    update?: EnfantUpdateWithWhereUniqueWithoutParentInput | EnfantUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: EnfantUpdateManyWithWhereWithoutParentInput | EnfantUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
  }

  export type RendezVousUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput> | RendezVousCreateWithoutParentInput[] | RendezVousUncheckedCreateWithoutParentInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutParentInput | RendezVousCreateOrConnectWithoutParentInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutParentInput | RendezVousUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: RendezVousCreateManyParentInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutParentInput | RendezVousUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutParentInput | RendezVousUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type PersonnelMedicalCreateNestedManyWithoutCentreVaxInput = {
    create?: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput> | PersonnelMedicalCreateWithoutCentreVaxInput[] | PersonnelMedicalUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutCentreVaxInput | PersonnelMedicalCreateOrConnectWithoutCentreVaxInput[]
    createMany?: PersonnelMedicalCreateManyCentreVaxInputEnvelope
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
  }

  export type EnfantCreateNestedManyWithoutCentreSanteInput = {
    create?: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput> | EnfantCreateWithoutCentreSanteInput[] | EnfantUncheckedCreateWithoutCentreSanteInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutCentreSanteInput | EnfantCreateOrConnectWithoutCentreSanteInput[]
    createMany?: EnfantCreateManyCentreSanteInputEnvelope
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
  }

  export type RendezVousCreateNestedManyWithoutCentreVaxInput = {
    create?: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput> | RendezVousCreateWithoutCentreVaxInput[] | RendezVousUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutCentreVaxInput | RendezVousCreateOrConnectWithoutCentreVaxInput[]
    createMany?: RendezVousCreateManyCentreVaxInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type PersonnelMedicalUncheckedCreateNestedManyWithoutCentreVaxInput = {
    create?: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput> | PersonnelMedicalCreateWithoutCentreVaxInput[] | PersonnelMedicalUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutCentreVaxInput | PersonnelMedicalCreateOrConnectWithoutCentreVaxInput[]
    createMany?: PersonnelMedicalCreateManyCentreVaxInputEnvelope
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
  }

  export type EnfantUncheckedCreateNestedManyWithoutCentreSanteInput = {
    create?: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput> | EnfantCreateWithoutCentreSanteInput[] | EnfantUncheckedCreateWithoutCentreSanteInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutCentreSanteInput | EnfantCreateOrConnectWithoutCentreSanteInput[]
    createMany?: EnfantCreateManyCentreSanteInputEnvelope
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
  }

  export type RendezVousUncheckedCreateNestedManyWithoutCentreVaxInput = {
    create?: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput> | RendezVousCreateWithoutCentreVaxInput[] | RendezVousUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutCentreVaxInput | RendezVousCreateOrConnectWithoutCentreVaxInput[]
    createMany?: RendezVousCreateManyCentreVaxInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PersonnelMedicalUpdateManyWithoutCentreVaxNestedInput = {
    create?: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput> | PersonnelMedicalCreateWithoutCentreVaxInput[] | PersonnelMedicalUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutCentreVaxInput | PersonnelMedicalCreateOrConnectWithoutCentreVaxInput[]
    upsert?: PersonnelMedicalUpsertWithWhereUniqueWithoutCentreVaxInput | PersonnelMedicalUpsertWithWhereUniqueWithoutCentreVaxInput[]
    createMany?: PersonnelMedicalCreateManyCentreVaxInputEnvelope
    set?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    disconnect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    delete?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    update?: PersonnelMedicalUpdateWithWhereUniqueWithoutCentreVaxInput | PersonnelMedicalUpdateWithWhereUniqueWithoutCentreVaxInput[]
    updateMany?: PersonnelMedicalUpdateManyWithWhereWithoutCentreVaxInput | PersonnelMedicalUpdateManyWithWhereWithoutCentreVaxInput[]
    deleteMany?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
  }

  export type EnfantUpdateManyWithoutCentreSanteNestedInput = {
    create?: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput> | EnfantCreateWithoutCentreSanteInput[] | EnfantUncheckedCreateWithoutCentreSanteInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutCentreSanteInput | EnfantCreateOrConnectWithoutCentreSanteInput[]
    upsert?: EnfantUpsertWithWhereUniqueWithoutCentreSanteInput | EnfantUpsertWithWhereUniqueWithoutCentreSanteInput[]
    createMany?: EnfantCreateManyCentreSanteInputEnvelope
    set?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    disconnect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    delete?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    update?: EnfantUpdateWithWhereUniqueWithoutCentreSanteInput | EnfantUpdateWithWhereUniqueWithoutCentreSanteInput[]
    updateMany?: EnfantUpdateManyWithWhereWithoutCentreSanteInput | EnfantUpdateManyWithWhereWithoutCentreSanteInput[]
    deleteMany?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
  }

  export type RendezVousUpdateManyWithoutCentreVaxNestedInput = {
    create?: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput> | RendezVousCreateWithoutCentreVaxInput[] | RendezVousUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutCentreVaxInput | RendezVousCreateOrConnectWithoutCentreVaxInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutCentreVaxInput | RendezVousUpsertWithWhereUniqueWithoutCentreVaxInput[]
    createMany?: RendezVousCreateManyCentreVaxInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutCentreVaxInput | RendezVousUpdateWithWhereUniqueWithoutCentreVaxInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutCentreVaxInput | RendezVousUpdateManyWithWhereWithoutCentreVaxInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxNestedInput = {
    create?: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput> | PersonnelMedicalCreateWithoutCentreVaxInput[] | PersonnelMedicalUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: PersonnelMedicalCreateOrConnectWithoutCentreVaxInput | PersonnelMedicalCreateOrConnectWithoutCentreVaxInput[]
    upsert?: PersonnelMedicalUpsertWithWhereUniqueWithoutCentreVaxInput | PersonnelMedicalUpsertWithWhereUniqueWithoutCentreVaxInput[]
    createMany?: PersonnelMedicalCreateManyCentreVaxInputEnvelope
    set?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    disconnect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    delete?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    connect?: PersonnelMedicalWhereUniqueInput | PersonnelMedicalWhereUniqueInput[]
    update?: PersonnelMedicalUpdateWithWhereUniqueWithoutCentreVaxInput | PersonnelMedicalUpdateWithWhereUniqueWithoutCentreVaxInput[]
    updateMany?: PersonnelMedicalUpdateManyWithWhereWithoutCentreVaxInput | PersonnelMedicalUpdateManyWithWhereWithoutCentreVaxInput[]
    deleteMany?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
  }

  export type EnfantUncheckedUpdateManyWithoutCentreSanteNestedInput = {
    create?: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput> | EnfantCreateWithoutCentreSanteInput[] | EnfantUncheckedCreateWithoutCentreSanteInput[]
    connectOrCreate?: EnfantCreateOrConnectWithoutCentreSanteInput | EnfantCreateOrConnectWithoutCentreSanteInput[]
    upsert?: EnfantUpsertWithWhereUniqueWithoutCentreSanteInput | EnfantUpsertWithWhereUniqueWithoutCentreSanteInput[]
    createMany?: EnfantCreateManyCentreSanteInputEnvelope
    set?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    disconnect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    delete?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    connect?: EnfantWhereUniqueInput | EnfantWhereUniqueInput[]
    update?: EnfantUpdateWithWhereUniqueWithoutCentreSanteInput | EnfantUpdateWithWhereUniqueWithoutCentreSanteInput[]
    updateMany?: EnfantUpdateManyWithWhereWithoutCentreSanteInput | EnfantUpdateManyWithWhereWithoutCentreSanteInput[]
    deleteMany?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
  }

  export type RendezVousUncheckedUpdateManyWithoutCentreVaxNestedInput = {
    create?: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput> | RendezVousCreateWithoutCentreVaxInput[] | RendezVousUncheckedCreateWithoutCentreVaxInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutCentreVaxInput | RendezVousCreateOrConnectWithoutCentreVaxInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutCentreVaxInput | RendezVousUpsertWithWhereUniqueWithoutCentreVaxInput[]
    createMany?: RendezVousCreateManyCentreVaxInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutCentreVaxInput | RendezVousUpdateWithWhereUniqueWithoutCentreVaxInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutCentreVaxInput | RendezVousUpdateManyWithWhereWithoutCentreVaxInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPersonnelsMedicalInput = {
    create?: XOR<UserCreateWithoutPersonnelsMedicalInput, UserUncheckedCreateWithoutPersonnelsMedicalInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonnelsMedicalInput
    connect?: UserWhereUniqueInput
  }

  export type CentreVaxCreateNestedOneWithoutPersonnelsMedicalInput = {
    create?: XOR<CentreVaxCreateWithoutPersonnelsMedicalInput, CentreVaxUncheckedCreateWithoutPersonnelsMedicalInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutPersonnelsMedicalInput
    connect?: CentreVaxWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPersonnelsMedicalNestedInput = {
    create?: XOR<UserCreateWithoutPersonnelsMedicalInput, UserUncheckedCreateWithoutPersonnelsMedicalInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonnelsMedicalInput
    upsert?: UserUpsertWithoutPersonnelsMedicalInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonnelsMedicalInput, UserUpdateWithoutPersonnelsMedicalInput>, UserUncheckedUpdateWithoutPersonnelsMedicalInput>
  }

  export type CentreVaxUpdateOneRequiredWithoutPersonnelsMedicalNestedInput = {
    create?: XOR<CentreVaxCreateWithoutPersonnelsMedicalInput, CentreVaxUncheckedCreateWithoutPersonnelsMedicalInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutPersonnelsMedicalInput
    upsert?: CentreVaxUpsertWithoutPersonnelsMedicalInput
    connect?: CentreVaxWhereUniqueInput
    update?: XOR<XOR<CentreVaxUpdateToOneWithWhereWithoutPersonnelsMedicalInput, CentreVaxUpdateWithoutPersonnelsMedicalInput>, CentreVaxUncheckedUpdateWithoutPersonnelsMedicalInput>
  }

  export type CentreVaxCreateNestedOneWithoutEnfantsInput = {
    create?: XOR<CentreVaxCreateWithoutEnfantsInput, CentreVaxUncheckedCreateWithoutEnfantsInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutEnfantsInput
    connect?: CentreVaxWhereUniqueInput
  }

  export type ParentCreateNestedOneWithoutEnfantsInput = {
    create?: XOR<ParentCreateWithoutEnfantsInput, ParentUncheckedCreateWithoutEnfantsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutEnfantsInput
    connect?: ParentWhereUniqueInput
  }

  export type VaccinCreateNestedManyWithoutEnfantInput = {
    create?: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput> | VaccinCreateWithoutEnfantInput[] | VaccinUncheckedCreateWithoutEnfantInput[]
    connectOrCreate?: VaccinCreateOrConnectWithoutEnfantInput | VaccinCreateOrConnectWithoutEnfantInput[]
    createMany?: VaccinCreateManyEnfantInputEnvelope
    connect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
  }

  export type VaccinUncheckedCreateNestedManyWithoutEnfantInput = {
    create?: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput> | VaccinCreateWithoutEnfantInput[] | VaccinUncheckedCreateWithoutEnfantInput[]
    connectOrCreate?: VaccinCreateOrConnectWithoutEnfantInput | VaccinCreateOrConnectWithoutEnfantInput[]
    createMany?: VaccinCreateManyEnfantInputEnvelope
    connect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CentreVaxUpdateOneRequiredWithoutEnfantsNestedInput = {
    create?: XOR<CentreVaxCreateWithoutEnfantsInput, CentreVaxUncheckedCreateWithoutEnfantsInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutEnfantsInput
    upsert?: CentreVaxUpsertWithoutEnfantsInput
    connect?: CentreVaxWhereUniqueInput
    update?: XOR<XOR<CentreVaxUpdateToOneWithWhereWithoutEnfantsInput, CentreVaxUpdateWithoutEnfantsInput>, CentreVaxUncheckedUpdateWithoutEnfantsInput>
  }

  export type ParentUpdateOneRequiredWithoutEnfantsNestedInput = {
    create?: XOR<ParentCreateWithoutEnfantsInput, ParentUncheckedCreateWithoutEnfantsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutEnfantsInput
    upsert?: ParentUpsertWithoutEnfantsInput
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutEnfantsInput, ParentUpdateWithoutEnfantsInput>, ParentUncheckedUpdateWithoutEnfantsInput>
  }

  export type VaccinUpdateManyWithoutEnfantNestedInput = {
    create?: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput> | VaccinCreateWithoutEnfantInput[] | VaccinUncheckedCreateWithoutEnfantInput[]
    connectOrCreate?: VaccinCreateOrConnectWithoutEnfantInput | VaccinCreateOrConnectWithoutEnfantInput[]
    upsert?: VaccinUpsertWithWhereUniqueWithoutEnfantInput | VaccinUpsertWithWhereUniqueWithoutEnfantInput[]
    createMany?: VaccinCreateManyEnfantInputEnvelope
    set?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    disconnect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    delete?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    connect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    update?: VaccinUpdateWithWhereUniqueWithoutEnfantInput | VaccinUpdateWithWhereUniqueWithoutEnfantInput[]
    updateMany?: VaccinUpdateManyWithWhereWithoutEnfantInput | VaccinUpdateManyWithWhereWithoutEnfantInput[]
    deleteMany?: VaccinScalarWhereInput | VaccinScalarWhereInput[]
  }

  export type VaccinUncheckedUpdateManyWithoutEnfantNestedInput = {
    create?: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput> | VaccinCreateWithoutEnfantInput[] | VaccinUncheckedCreateWithoutEnfantInput[]
    connectOrCreate?: VaccinCreateOrConnectWithoutEnfantInput | VaccinCreateOrConnectWithoutEnfantInput[]
    upsert?: VaccinUpsertWithWhereUniqueWithoutEnfantInput | VaccinUpsertWithWhereUniqueWithoutEnfantInput[]
    createMany?: VaccinCreateManyEnfantInputEnvelope
    set?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    disconnect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    delete?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    connect?: VaccinWhereUniqueInput | VaccinWhereUniqueInput[]
    update?: VaccinUpdateWithWhereUniqueWithoutEnfantInput | VaccinUpdateWithWhereUniqueWithoutEnfantInput[]
    updateMany?: VaccinUpdateManyWithWhereWithoutEnfantInput | VaccinUpdateManyWithWhereWithoutEnfantInput[]
    deleteMany?: VaccinScalarWhereInput | VaccinScalarWhereInput[]
  }

  export type EnfantCreateNestedOneWithoutVaccinsInput = {
    create?: XOR<EnfantCreateWithoutVaccinsInput, EnfantUncheckedCreateWithoutVaccinsInput>
    connectOrCreate?: EnfantCreateOrConnectWithoutVaccinsInput
    connect?: EnfantWhereUniqueInput
  }

  export type RendezVousCreateNestedManyWithoutVaccinInput = {
    create?: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput> | RendezVousCreateWithoutVaccinInput[] | RendezVousUncheckedCreateWithoutVaccinInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutVaccinInput | RendezVousCreateOrConnectWithoutVaccinInput[]
    createMany?: RendezVousCreateManyVaccinInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type RendezVousUncheckedCreateNestedManyWithoutVaccinInput = {
    create?: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput> | RendezVousCreateWithoutVaccinInput[] | RendezVousUncheckedCreateWithoutVaccinInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutVaccinInput | RendezVousCreateOrConnectWithoutVaccinInput[]
    createMany?: RendezVousCreateManyVaccinInputEnvelope
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
  }

  export type EnfantUpdateOneRequiredWithoutVaccinsNestedInput = {
    create?: XOR<EnfantCreateWithoutVaccinsInput, EnfantUncheckedCreateWithoutVaccinsInput>
    connectOrCreate?: EnfantCreateOrConnectWithoutVaccinsInput
    upsert?: EnfantUpsertWithoutVaccinsInput
    connect?: EnfantWhereUniqueInput
    update?: XOR<XOR<EnfantUpdateToOneWithWhereWithoutVaccinsInput, EnfantUpdateWithoutVaccinsInput>, EnfantUncheckedUpdateWithoutVaccinsInput>
  }

  export type RendezVousUpdateManyWithoutVaccinNestedInput = {
    create?: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput> | RendezVousCreateWithoutVaccinInput[] | RendezVousUncheckedCreateWithoutVaccinInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutVaccinInput | RendezVousCreateOrConnectWithoutVaccinInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutVaccinInput | RendezVousUpsertWithWhereUniqueWithoutVaccinInput[]
    createMany?: RendezVousCreateManyVaccinInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutVaccinInput | RendezVousUpdateWithWhereUniqueWithoutVaccinInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutVaccinInput | RendezVousUpdateManyWithWhereWithoutVaccinInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type RendezVousUncheckedUpdateManyWithoutVaccinNestedInput = {
    create?: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput> | RendezVousCreateWithoutVaccinInput[] | RendezVousUncheckedCreateWithoutVaccinInput[]
    connectOrCreate?: RendezVousCreateOrConnectWithoutVaccinInput | RendezVousCreateOrConnectWithoutVaccinInput[]
    upsert?: RendezVousUpsertWithWhereUniqueWithoutVaccinInput | RendezVousUpsertWithWhereUniqueWithoutVaccinInput[]
    createMany?: RendezVousCreateManyVaccinInputEnvelope
    set?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    disconnect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    delete?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    connect?: RendezVousWhereUniqueInput | RendezVousWhereUniqueInput[]
    update?: RendezVousUpdateWithWhereUniqueWithoutVaccinInput | RendezVousUpdateWithWhereUniqueWithoutVaccinInput[]
    updateMany?: RendezVousUpdateManyWithWhereWithoutVaccinInput | RendezVousUpdateManyWithWhereWithoutVaccinInput[]
    deleteMany?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
  }

  export type CentreVaxCreateNestedOneWithoutRendezVousInput = {
    create?: XOR<CentreVaxCreateWithoutRendezVousInput, CentreVaxUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutRendezVousInput
    connect?: CentreVaxWhereUniqueInput
  }

  export type ParentCreateNestedOneWithoutRendezVousInput = {
    create?: XOR<ParentCreateWithoutRendezVousInput, ParentUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: ParentCreateOrConnectWithoutRendezVousInput
    connect?: ParentWhereUniqueInput
  }

  export type VaccinCreateNestedOneWithoutRendezVousInput = {
    create?: XOR<VaccinCreateWithoutRendezVousInput, VaccinUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: VaccinCreateOrConnectWithoutRendezVousInput
    connect?: VaccinWhereUniqueInput
  }

  export type CentreVaxUpdateOneRequiredWithoutRendezVousNestedInput = {
    create?: XOR<CentreVaxCreateWithoutRendezVousInput, CentreVaxUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: CentreVaxCreateOrConnectWithoutRendezVousInput
    upsert?: CentreVaxUpsertWithoutRendezVousInput
    connect?: CentreVaxWhereUniqueInput
    update?: XOR<XOR<CentreVaxUpdateToOneWithWhereWithoutRendezVousInput, CentreVaxUpdateWithoutRendezVousInput>, CentreVaxUncheckedUpdateWithoutRendezVousInput>
  }

  export type ParentUpdateOneRequiredWithoutRendezVousNestedInput = {
    create?: XOR<ParentCreateWithoutRendezVousInput, ParentUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: ParentCreateOrConnectWithoutRendezVousInput
    upsert?: ParentUpsertWithoutRendezVousInput
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutRendezVousInput, ParentUpdateWithoutRendezVousInput>, ParentUncheckedUpdateWithoutRendezVousInput>
  }

  export type VaccinUpdateOneRequiredWithoutRendezVousNestedInput = {
    create?: XOR<VaccinCreateWithoutRendezVousInput, VaccinUncheckedCreateWithoutRendezVousInput>
    connectOrCreate?: VaccinCreateOrConnectWithoutRendezVousInput
    upsert?: VaccinUpsertWithoutRendezVousInput
    connect?: VaccinWhereUniqueInput
    update?: XOR<XOR<VaccinUpdateToOneWithWhereWithoutRendezVousInput, VaccinUpdateWithoutRendezVousInput>, VaccinUncheckedUpdateWithoutRendezVousInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ParentCreateWithoutUserInput = {
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    enfants?: EnfantCreateNestedManyWithoutParentInput
    rendezVous?: RendezVousCreateNestedManyWithoutParentInput
  }

  export type ParentUncheckedCreateWithoutUserInput = {
    idP?: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    enfants?: EnfantUncheckedCreateNestedManyWithoutParentInput
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentCreateOrConnectWithoutUserInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
  }

  export type ParentCreateManyUserInputEnvelope = {
    data: ParentCreateManyUserInput | ParentCreateManyUserInput[]
  }

  export type PersonnelMedicalCreateWithoutUserInput = {
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    CentreVax: CentreVaxCreateNestedOneWithoutPersonnelsMedicalInput
  }

  export type PersonnelMedicalUncheckedCreateWithoutUserInput = {
    idPM?: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    CentreVax_idC: number
  }

  export type PersonnelMedicalCreateOrConnectWithoutUserInput = {
    where: PersonnelMedicalWhereUniqueInput
    create: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput>
  }

  export type PersonnelMedicalCreateManyUserInputEnvelope = {
    data: PersonnelMedicalCreateManyUserInput | PersonnelMedicalCreateManyUserInput[]
  }

  export type ParentUpsertWithWhereUniqueWithoutUserInput = {
    where: ParentWhereUniqueInput
    update: XOR<ParentUpdateWithoutUserInput, ParentUncheckedUpdateWithoutUserInput>
    create: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
  }

  export type ParentUpdateWithWhereUniqueWithoutUserInput = {
    where: ParentWhereUniqueInput
    data: XOR<ParentUpdateWithoutUserInput, ParentUncheckedUpdateWithoutUserInput>
  }

  export type ParentUpdateManyWithWhereWithoutUserInput = {
    where: ParentScalarWhereInput
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyWithoutUserInput>
  }

  export type ParentScalarWhereInput = {
    AND?: ParentScalarWhereInput | ParentScalarWhereInput[]
    OR?: ParentScalarWhereInput[]
    NOT?: ParentScalarWhereInput | ParentScalarWhereInput[]
    idP?: IntFilter<"Parent"> | number
    user_id?: IntFilter<"Parent"> | number
    nomP?: StringNullableFilter<"Parent"> | string | null
    prenomP?: StringNullableFilter<"Parent"> | string | null
    numTelP?: StringNullableFilter<"Parent"> | string | null
    roleP?: StringNullableFilter<"Parent"> | string | null
    sexeP?: StringFilter<"Parent"> | string
  }

  export type PersonnelMedicalUpsertWithWhereUniqueWithoutUserInput = {
    where: PersonnelMedicalWhereUniqueInput
    update: XOR<PersonnelMedicalUpdateWithoutUserInput, PersonnelMedicalUncheckedUpdateWithoutUserInput>
    create: XOR<PersonnelMedicalCreateWithoutUserInput, PersonnelMedicalUncheckedCreateWithoutUserInput>
  }

  export type PersonnelMedicalUpdateWithWhereUniqueWithoutUserInput = {
    where: PersonnelMedicalWhereUniqueInput
    data: XOR<PersonnelMedicalUpdateWithoutUserInput, PersonnelMedicalUncheckedUpdateWithoutUserInput>
  }

  export type PersonnelMedicalUpdateManyWithWhereWithoutUserInput = {
    where: PersonnelMedicalScalarWhereInput
    data: XOR<PersonnelMedicalUpdateManyMutationInput, PersonnelMedicalUncheckedUpdateManyWithoutUserInput>
  }

  export type PersonnelMedicalScalarWhereInput = {
    AND?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
    OR?: PersonnelMedicalScalarWhereInput[]
    NOT?: PersonnelMedicalScalarWhereInput | PersonnelMedicalScalarWhereInput[]
    idPM?: IntFilter<"PersonnelMedical"> | number
    user_id?: IntFilter<"PersonnelMedical"> | number
    emailPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    nomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    prenomPM?: StringNullableFilter<"PersonnelMedical"> | string | null
    numTelPM?: IntNullableFilter<"PersonnelMedical"> | number | null
    rolePM?: StringNullableFilter<"PersonnelMedical"> | string | null
    CentreVax_idC?: IntFilter<"PersonnelMedical"> | number
  }

  export type UserCreateWithoutParentInput = {
    email: string
    password: string
    role: string
    personnelsMedical?: PersonnelMedicalCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParentInput = {
    id?: number
    email: string
    password: string
    role: string
    personnelsMedical?: PersonnelMedicalUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
  }

  export type EnfantCreateWithoutParentInput = {
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    centreSante: CentreVaxCreateNestedOneWithoutEnfantsInput
    vaccins?: VaccinCreateNestedManyWithoutEnfantInput
  }

  export type EnfantUncheckedCreateWithoutParentInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    vaccins?: VaccinUncheckedCreateNestedManyWithoutEnfantInput
  }

  export type EnfantCreateOrConnectWithoutParentInput = {
    where: EnfantWhereUniqueInput
    create: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput>
  }

  export type EnfantCreateManyParentInputEnvelope = {
    data: EnfantCreateManyParentInput | EnfantCreateManyParentInput[]
  }

  export type RendezVousCreateWithoutParentInput = {
    dateR?: Date | string | null
    statusR: string
    CentreVax: CentreVaxCreateNestedOneWithoutRendezVousInput
    Vaccin: VaccinCreateNestedOneWithoutRendezVousInput
  }

  export type RendezVousUncheckedCreateWithoutParentInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Vaccin_idV: number
  }

  export type RendezVousCreateOrConnectWithoutParentInput = {
    where: RendezVousWhereUniqueInput
    create: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput>
  }

  export type RendezVousCreateManyParentInputEnvelope = {
    data: RendezVousCreateManyParentInput | RendezVousCreateManyParentInput[]
  }

  export type UserUpsertWithoutParentInput = {
    update: XOR<UserUpdateWithoutParentInput, UserUncheckedUpdateWithoutParentInput>
    create: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParentInput, UserUncheckedUpdateWithoutParentInput>
  }

  export type UserUpdateWithoutParentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personnelsMedical?: PersonnelMedicalUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personnelsMedical?: PersonnelMedicalUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EnfantUpsertWithWhereUniqueWithoutParentInput = {
    where: EnfantWhereUniqueInput
    update: XOR<EnfantUpdateWithoutParentInput, EnfantUncheckedUpdateWithoutParentInput>
    create: XOR<EnfantCreateWithoutParentInput, EnfantUncheckedCreateWithoutParentInput>
  }

  export type EnfantUpdateWithWhereUniqueWithoutParentInput = {
    where: EnfantWhereUniqueInput
    data: XOR<EnfantUpdateWithoutParentInput, EnfantUncheckedUpdateWithoutParentInput>
  }

  export type EnfantUpdateManyWithWhereWithoutParentInput = {
    where: EnfantScalarWhereInput
    data: XOR<EnfantUpdateManyMutationInput, EnfantUncheckedUpdateManyWithoutParentInput>
  }

  export type EnfantScalarWhereInput = {
    AND?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
    OR?: EnfantScalarWhereInput[]
    NOT?: EnfantScalarWhereInput | EnfantScalarWhereInput[]
    idE?: IntFilter<"Enfant"> | number
    nomCompletE?: StringFilter<"Enfant"> | string
    dateNaiss?: DateTimeNullableFilter<"Enfant"> | Date | string | null
    adresseE?: StringNullableFilter<"Enfant"> | string | null
    numSMI?: StringFilter<"Enfant"> | string
    centreSante_idC?: IntFilter<"Enfant"> | number
    sexe?: StringFilter<"Enfant"> | string
    allergies?: StringNullableFilter<"Enfant"> | string | null
    groupeSang?: StringNullableFilter<"Enfant"> | string | null
    infoMedicaux?: StringNullableFilter<"Enfant"> | string | null
    province?: StringNullableFilter<"Enfant"> | string | null
    ville?: StringNullableFilter<"Enfant"> | string | null
    Parent_idP?: IntFilter<"Enfant"> | number
  }

  export type RendezVousUpsertWithWhereUniqueWithoutParentInput = {
    where: RendezVousWhereUniqueInput
    update: XOR<RendezVousUpdateWithoutParentInput, RendezVousUncheckedUpdateWithoutParentInput>
    create: XOR<RendezVousCreateWithoutParentInput, RendezVousUncheckedCreateWithoutParentInput>
  }

  export type RendezVousUpdateWithWhereUniqueWithoutParentInput = {
    where: RendezVousWhereUniqueInput
    data: XOR<RendezVousUpdateWithoutParentInput, RendezVousUncheckedUpdateWithoutParentInput>
  }

  export type RendezVousUpdateManyWithWhereWithoutParentInput = {
    where: RendezVousScalarWhereInput
    data: XOR<RendezVousUpdateManyMutationInput, RendezVousUncheckedUpdateManyWithoutParentInput>
  }

  export type RendezVousScalarWhereInput = {
    AND?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
    OR?: RendezVousScalarWhereInput[]
    NOT?: RendezVousScalarWhereInput | RendezVousScalarWhereInput[]
    idR?: IntFilter<"RendezVous"> | number
    dateR?: DateTimeNullableFilter<"RendezVous"> | Date | string | null
    statusR?: StringFilter<"RendezVous"> | string
    CentreVax_idC?: IntFilter<"RendezVous"> | number
    Parent_idP?: IntFilter<"RendezVous"> | number
    Vaccin_idV?: IntFilter<"RendezVous"> | number
  }

  export type PersonnelMedicalCreateWithoutCentreVaxInput = {
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    user: UserCreateNestedOneWithoutPersonnelsMedicalInput
  }

  export type PersonnelMedicalUncheckedCreateWithoutCentreVaxInput = {
    idPM?: number
    user_id: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
  }

  export type PersonnelMedicalCreateOrConnectWithoutCentreVaxInput = {
    where: PersonnelMedicalWhereUniqueInput
    create: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput>
  }

  export type PersonnelMedicalCreateManyCentreVaxInputEnvelope = {
    data: PersonnelMedicalCreateManyCentreVaxInput | PersonnelMedicalCreateManyCentreVaxInput[]
  }

  export type EnfantCreateWithoutCentreSanteInput = {
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent: ParentCreateNestedOneWithoutEnfantsInput
    vaccins?: VaccinCreateNestedManyWithoutEnfantInput
  }

  export type EnfantUncheckedCreateWithoutCentreSanteInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent_idP: number
    vaccins?: VaccinUncheckedCreateNestedManyWithoutEnfantInput
  }

  export type EnfantCreateOrConnectWithoutCentreSanteInput = {
    where: EnfantWhereUniqueInput
    create: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput>
  }

  export type EnfantCreateManyCentreSanteInputEnvelope = {
    data: EnfantCreateManyCentreSanteInput | EnfantCreateManyCentreSanteInput[]
  }

  export type RendezVousCreateWithoutCentreVaxInput = {
    dateR?: Date | string | null
    statusR: string
    Parent: ParentCreateNestedOneWithoutRendezVousInput
    Vaccin: VaccinCreateNestedOneWithoutRendezVousInput
  }

  export type RendezVousUncheckedCreateWithoutCentreVaxInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    Parent_idP: number
    Vaccin_idV: number
  }

  export type RendezVousCreateOrConnectWithoutCentreVaxInput = {
    where: RendezVousWhereUniqueInput
    create: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput>
  }

  export type RendezVousCreateManyCentreVaxInputEnvelope = {
    data: RendezVousCreateManyCentreVaxInput | RendezVousCreateManyCentreVaxInput[]
  }

  export type PersonnelMedicalUpsertWithWhereUniqueWithoutCentreVaxInput = {
    where: PersonnelMedicalWhereUniqueInput
    update: XOR<PersonnelMedicalUpdateWithoutCentreVaxInput, PersonnelMedicalUncheckedUpdateWithoutCentreVaxInput>
    create: XOR<PersonnelMedicalCreateWithoutCentreVaxInput, PersonnelMedicalUncheckedCreateWithoutCentreVaxInput>
  }

  export type PersonnelMedicalUpdateWithWhereUniqueWithoutCentreVaxInput = {
    where: PersonnelMedicalWhereUniqueInput
    data: XOR<PersonnelMedicalUpdateWithoutCentreVaxInput, PersonnelMedicalUncheckedUpdateWithoutCentreVaxInput>
  }

  export type PersonnelMedicalUpdateManyWithWhereWithoutCentreVaxInput = {
    where: PersonnelMedicalScalarWhereInput
    data: XOR<PersonnelMedicalUpdateManyMutationInput, PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxInput>
  }

  export type EnfantUpsertWithWhereUniqueWithoutCentreSanteInput = {
    where: EnfantWhereUniqueInput
    update: XOR<EnfantUpdateWithoutCentreSanteInput, EnfantUncheckedUpdateWithoutCentreSanteInput>
    create: XOR<EnfantCreateWithoutCentreSanteInput, EnfantUncheckedCreateWithoutCentreSanteInput>
  }

  export type EnfantUpdateWithWhereUniqueWithoutCentreSanteInput = {
    where: EnfantWhereUniqueInput
    data: XOR<EnfantUpdateWithoutCentreSanteInput, EnfantUncheckedUpdateWithoutCentreSanteInput>
  }

  export type EnfantUpdateManyWithWhereWithoutCentreSanteInput = {
    where: EnfantScalarWhereInput
    data: XOR<EnfantUpdateManyMutationInput, EnfantUncheckedUpdateManyWithoutCentreSanteInput>
  }

  export type RendezVousUpsertWithWhereUniqueWithoutCentreVaxInput = {
    where: RendezVousWhereUniqueInput
    update: XOR<RendezVousUpdateWithoutCentreVaxInput, RendezVousUncheckedUpdateWithoutCentreVaxInput>
    create: XOR<RendezVousCreateWithoutCentreVaxInput, RendezVousUncheckedCreateWithoutCentreVaxInput>
  }

  export type RendezVousUpdateWithWhereUniqueWithoutCentreVaxInput = {
    where: RendezVousWhereUniqueInput
    data: XOR<RendezVousUpdateWithoutCentreVaxInput, RendezVousUncheckedUpdateWithoutCentreVaxInput>
  }

  export type RendezVousUpdateManyWithWhereWithoutCentreVaxInput = {
    where: RendezVousScalarWhereInput
    data: XOR<RendezVousUpdateManyMutationInput, RendezVousUncheckedUpdateManyWithoutCentreVaxInput>
  }

  export type UserCreateWithoutPersonnelsMedicalInput = {
    email: string
    password: string
    role: string
    Parent?: ParentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPersonnelsMedicalInput = {
    id?: number
    email: string
    password: string
    role: string
    Parent?: ParentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPersonnelsMedicalInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonnelsMedicalInput, UserUncheckedCreateWithoutPersonnelsMedicalInput>
  }

  export type CentreVaxCreateWithoutPersonnelsMedicalInput = {
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    enfants?: EnfantCreateNestedManyWithoutCentreSanteInput
    rendezVous?: RendezVousCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxUncheckedCreateWithoutPersonnelsMedicalInput = {
    idC?: number
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    enfants?: EnfantUncheckedCreateNestedManyWithoutCentreSanteInput
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxCreateOrConnectWithoutPersonnelsMedicalInput = {
    where: CentreVaxWhereUniqueInput
    create: XOR<CentreVaxCreateWithoutPersonnelsMedicalInput, CentreVaxUncheckedCreateWithoutPersonnelsMedicalInput>
  }

  export type UserUpsertWithoutPersonnelsMedicalInput = {
    update: XOR<UserUpdateWithoutPersonnelsMedicalInput, UserUncheckedUpdateWithoutPersonnelsMedicalInput>
    create: XOR<UserCreateWithoutPersonnelsMedicalInput, UserUncheckedCreateWithoutPersonnelsMedicalInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPersonnelsMedicalInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPersonnelsMedicalInput, UserUncheckedUpdateWithoutPersonnelsMedicalInput>
  }

  export type UserUpdateWithoutPersonnelsMedicalInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    Parent?: ParentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonnelsMedicalInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    Parent?: ParentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CentreVaxUpsertWithoutPersonnelsMedicalInput = {
    update: XOR<CentreVaxUpdateWithoutPersonnelsMedicalInput, CentreVaxUncheckedUpdateWithoutPersonnelsMedicalInput>
    create: XOR<CentreVaxCreateWithoutPersonnelsMedicalInput, CentreVaxUncheckedCreateWithoutPersonnelsMedicalInput>
    where?: CentreVaxWhereInput
  }

  export type CentreVaxUpdateToOneWithWhereWithoutPersonnelsMedicalInput = {
    where?: CentreVaxWhereInput
    data: XOR<CentreVaxUpdateWithoutPersonnelsMedicalInput, CentreVaxUncheckedUpdateWithoutPersonnelsMedicalInput>
  }

  export type CentreVaxUpdateWithoutPersonnelsMedicalInput = {
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    enfants?: EnfantUpdateManyWithoutCentreSanteNestedInput
    rendezVous?: RendezVousUpdateManyWithoutCentreVaxNestedInput
  }

  export type CentreVaxUncheckedUpdateWithoutPersonnelsMedicalInput = {
    idC?: IntFieldUpdateOperationsInput | number
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    enfants?: EnfantUncheckedUpdateManyWithoutCentreSanteNestedInput
    rendezVous?: RendezVousUncheckedUpdateManyWithoutCentreVaxNestedInput
  }

  export type CentreVaxCreateWithoutEnfantsInput = {
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalCreateNestedManyWithoutCentreVaxInput
    rendezVous?: RendezVousCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxUncheckedCreateWithoutEnfantsInput = {
    idC?: number
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalUncheckedCreateNestedManyWithoutCentreVaxInput
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutCentreVaxInput
  }

  export type CentreVaxCreateOrConnectWithoutEnfantsInput = {
    where: CentreVaxWhereUniqueInput
    create: XOR<CentreVaxCreateWithoutEnfantsInput, CentreVaxUncheckedCreateWithoutEnfantsInput>
  }

  export type ParentCreateWithoutEnfantsInput = {
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    user: UserCreateNestedOneWithoutParentInput
    rendezVous?: RendezVousCreateNestedManyWithoutParentInput
  }

  export type ParentUncheckedCreateWithoutEnfantsInput = {
    idP?: number
    user_id: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentCreateOrConnectWithoutEnfantsInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutEnfantsInput, ParentUncheckedCreateWithoutEnfantsInput>
  }

  export type VaccinCreateWithoutEnfantInput = {
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    rendezVous?: RendezVousCreateNestedManyWithoutVaccinInput
  }

  export type VaccinUncheckedCreateWithoutEnfantInput = {
    idV?: number
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    rendezVous?: RendezVousUncheckedCreateNestedManyWithoutVaccinInput
  }

  export type VaccinCreateOrConnectWithoutEnfantInput = {
    where: VaccinWhereUniqueInput
    create: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput>
  }

  export type VaccinCreateManyEnfantInputEnvelope = {
    data: VaccinCreateManyEnfantInput | VaccinCreateManyEnfantInput[]
  }

  export type CentreVaxUpsertWithoutEnfantsInput = {
    update: XOR<CentreVaxUpdateWithoutEnfantsInput, CentreVaxUncheckedUpdateWithoutEnfantsInput>
    create: XOR<CentreVaxCreateWithoutEnfantsInput, CentreVaxUncheckedCreateWithoutEnfantsInput>
    where?: CentreVaxWhereInput
  }

  export type CentreVaxUpdateToOneWithWhereWithoutEnfantsInput = {
    where?: CentreVaxWhereInput
    data: XOR<CentreVaxUpdateWithoutEnfantsInput, CentreVaxUncheckedUpdateWithoutEnfantsInput>
  }

  export type CentreVaxUpdateWithoutEnfantsInput = {
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUpdateManyWithoutCentreVaxNestedInput
    rendezVous?: RendezVousUpdateManyWithoutCentreVaxNestedInput
  }

  export type CentreVaxUncheckedUpdateWithoutEnfantsInput = {
    idC?: IntFieldUpdateOperationsInput | number
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxNestedInput
    rendezVous?: RendezVousUncheckedUpdateManyWithoutCentreVaxNestedInput
  }

  export type ParentUpsertWithoutEnfantsInput = {
    update: XOR<ParentUpdateWithoutEnfantsInput, ParentUncheckedUpdateWithoutEnfantsInput>
    create: XOR<ParentCreateWithoutEnfantsInput, ParentUncheckedCreateWithoutEnfantsInput>
    where?: ParentWhereInput
  }

  export type ParentUpdateToOneWithWhereWithoutEnfantsInput = {
    where?: ParentWhereInput
    data: XOR<ParentUpdateWithoutEnfantsInput, ParentUncheckedUpdateWithoutEnfantsInput>
  }

  export type ParentUpdateWithoutEnfantsInput = {
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutParentNestedInput
    rendezVous?: RendezVousUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateWithoutEnfantsInput = {
    idP?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    rendezVous?: RendezVousUncheckedUpdateManyWithoutParentNestedInput
  }

  export type VaccinUpsertWithWhereUniqueWithoutEnfantInput = {
    where: VaccinWhereUniqueInput
    update: XOR<VaccinUpdateWithoutEnfantInput, VaccinUncheckedUpdateWithoutEnfantInput>
    create: XOR<VaccinCreateWithoutEnfantInput, VaccinUncheckedCreateWithoutEnfantInput>
  }

  export type VaccinUpdateWithWhereUniqueWithoutEnfantInput = {
    where: VaccinWhereUniqueInput
    data: XOR<VaccinUpdateWithoutEnfantInput, VaccinUncheckedUpdateWithoutEnfantInput>
  }

  export type VaccinUpdateManyWithWhereWithoutEnfantInput = {
    where: VaccinScalarWhereInput
    data: XOR<VaccinUpdateManyMutationInput, VaccinUncheckedUpdateManyWithoutEnfantInput>
  }

  export type VaccinScalarWhereInput = {
    AND?: VaccinScalarWhereInput | VaccinScalarWhereInput[]
    OR?: VaccinScalarWhereInput[]
    NOT?: VaccinScalarWhereInput | VaccinScalarWhereInput[]
    idV?: IntFilter<"Vaccin"> | number
    nomV?: StringFilter<"Vaccin"> | string
    descr?: StringNullableFilter<"Vaccin"> | string | null
    EffetSecondaire?: StringNullableFilter<"Vaccin"> | string | null
    ageRecommande?: IntNullableFilter<"Vaccin"> | number | null
    doseV?: StringNullableFilter<"Vaccin"> | string | null
    abreviationV?: StringNullableFilter<"Vaccin"> | string | null
    maladieEvitable?: StringNullableFilter<"Vaccin"> | string | null
    Enfant_idE?: IntFilter<"Vaccin"> | number
  }

  export type EnfantCreateWithoutVaccinsInput = {
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    centreSante: CentreVaxCreateNestedOneWithoutEnfantsInput
    Parent: ParentCreateNestedOneWithoutEnfantsInput
  }

  export type EnfantUncheckedCreateWithoutVaccinsInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent_idP: number
  }

  export type EnfantCreateOrConnectWithoutVaccinsInput = {
    where: EnfantWhereUniqueInput
    create: XOR<EnfantCreateWithoutVaccinsInput, EnfantUncheckedCreateWithoutVaccinsInput>
  }

  export type RendezVousCreateWithoutVaccinInput = {
    dateR?: Date | string | null
    statusR: string
    CentreVax: CentreVaxCreateNestedOneWithoutRendezVousInput
    Parent: ParentCreateNestedOneWithoutRendezVousInput
  }

  export type RendezVousUncheckedCreateWithoutVaccinInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Parent_idP: number
  }

  export type RendezVousCreateOrConnectWithoutVaccinInput = {
    where: RendezVousWhereUniqueInput
    create: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput>
  }

  export type RendezVousCreateManyVaccinInputEnvelope = {
    data: RendezVousCreateManyVaccinInput | RendezVousCreateManyVaccinInput[]
  }

  export type EnfantUpsertWithoutVaccinsInput = {
    update: XOR<EnfantUpdateWithoutVaccinsInput, EnfantUncheckedUpdateWithoutVaccinsInput>
    create: XOR<EnfantCreateWithoutVaccinsInput, EnfantUncheckedCreateWithoutVaccinsInput>
    where?: EnfantWhereInput
  }

  export type EnfantUpdateToOneWithWhereWithoutVaccinsInput = {
    where?: EnfantWhereInput
    data: XOR<EnfantUpdateWithoutVaccinsInput, EnfantUncheckedUpdateWithoutVaccinsInput>
  }

  export type EnfantUpdateWithoutVaccinsInput = {
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    centreSante?: CentreVaxUpdateOneRequiredWithoutEnfantsNestedInput
    Parent?: ParentUpdateOneRequiredWithoutEnfantsNestedInput
  }

  export type EnfantUncheckedUpdateWithoutVaccinsInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    centreSante_idC?: IntFieldUpdateOperationsInput | number
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent_idP?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousUpsertWithWhereUniqueWithoutVaccinInput = {
    where: RendezVousWhereUniqueInput
    update: XOR<RendezVousUpdateWithoutVaccinInput, RendezVousUncheckedUpdateWithoutVaccinInput>
    create: XOR<RendezVousCreateWithoutVaccinInput, RendezVousUncheckedCreateWithoutVaccinInput>
  }

  export type RendezVousUpdateWithWhereUniqueWithoutVaccinInput = {
    where: RendezVousWhereUniqueInput
    data: XOR<RendezVousUpdateWithoutVaccinInput, RendezVousUncheckedUpdateWithoutVaccinInput>
  }

  export type RendezVousUpdateManyWithWhereWithoutVaccinInput = {
    where: RendezVousScalarWhereInput
    data: XOR<RendezVousUpdateManyMutationInput, RendezVousUncheckedUpdateManyWithoutVaccinInput>
  }

  export type CentreVaxCreateWithoutRendezVousInput = {
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalCreateNestedManyWithoutCentreVaxInput
    enfants?: EnfantCreateNestedManyWithoutCentreSanteInput
  }

  export type CentreVaxUncheckedCreateWithoutRendezVousInput = {
    idC?: number
    nomC?: string | null
    adresseC?: string | null
    numTel?: number | null
    personnelsMedical?: PersonnelMedicalUncheckedCreateNestedManyWithoutCentreVaxInput
    enfants?: EnfantUncheckedCreateNestedManyWithoutCentreSanteInput
  }

  export type CentreVaxCreateOrConnectWithoutRendezVousInput = {
    where: CentreVaxWhereUniqueInput
    create: XOR<CentreVaxCreateWithoutRendezVousInput, CentreVaxUncheckedCreateWithoutRendezVousInput>
  }

  export type ParentCreateWithoutRendezVousInput = {
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    user: UserCreateNestedOneWithoutParentInput
    enfants?: EnfantCreateNestedManyWithoutParentInput
  }

  export type ParentUncheckedCreateWithoutRendezVousInput = {
    idP?: number
    user_id: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
    enfants?: EnfantUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentCreateOrConnectWithoutRendezVousInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutRendezVousInput, ParentUncheckedCreateWithoutRendezVousInput>
  }

  export type VaccinCreateWithoutRendezVousInput = {
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    enfant: EnfantCreateNestedOneWithoutVaccinsInput
  }

  export type VaccinUncheckedCreateWithoutRendezVousInput = {
    idV?: number
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
    Enfant_idE: number
  }

  export type VaccinCreateOrConnectWithoutRendezVousInput = {
    where: VaccinWhereUniqueInput
    create: XOR<VaccinCreateWithoutRendezVousInput, VaccinUncheckedCreateWithoutRendezVousInput>
  }

  export type CentreVaxUpsertWithoutRendezVousInput = {
    update: XOR<CentreVaxUpdateWithoutRendezVousInput, CentreVaxUncheckedUpdateWithoutRendezVousInput>
    create: XOR<CentreVaxCreateWithoutRendezVousInput, CentreVaxUncheckedCreateWithoutRendezVousInput>
    where?: CentreVaxWhereInput
  }

  export type CentreVaxUpdateToOneWithWhereWithoutRendezVousInput = {
    where?: CentreVaxWhereInput
    data: XOR<CentreVaxUpdateWithoutRendezVousInput, CentreVaxUncheckedUpdateWithoutRendezVousInput>
  }

  export type CentreVaxUpdateWithoutRendezVousInput = {
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUpdateManyWithoutCentreVaxNestedInput
    enfants?: EnfantUpdateManyWithoutCentreSanteNestedInput
  }

  export type CentreVaxUncheckedUpdateWithoutRendezVousInput = {
    idC?: IntFieldUpdateOperationsInput | number
    nomC?: NullableStringFieldUpdateOperationsInput | string | null
    adresseC?: NullableStringFieldUpdateOperationsInput | string | null
    numTel?: NullableIntFieldUpdateOperationsInput | number | null
    personnelsMedical?: PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxNestedInput
    enfants?: EnfantUncheckedUpdateManyWithoutCentreSanteNestedInput
  }

  export type ParentUpsertWithoutRendezVousInput = {
    update: XOR<ParentUpdateWithoutRendezVousInput, ParentUncheckedUpdateWithoutRendezVousInput>
    create: XOR<ParentCreateWithoutRendezVousInput, ParentUncheckedCreateWithoutRendezVousInput>
    where?: ParentWhereInput
  }

  export type ParentUpdateToOneWithWhereWithoutRendezVousInput = {
    where?: ParentWhereInput
    data: XOR<ParentUpdateWithoutRendezVousInput, ParentUncheckedUpdateWithoutRendezVousInput>
  }

  export type ParentUpdateWithoutRendezVousInput = {
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutParentNestedInput
    enfants?: EnfantUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateWithoutRendezVousInput = {
    idP?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    enfants?: EnfantUncheckedUpdateManyWithoutParentNestedInput
  }

  export type VaccinUpsertWithoutRendezVousInput = {
    update: XOR<VaccinUpdateWithoutRendezVousInput, VaccinUncheckedUpdateWithoutRendezVousInput>
    create: XOR<VaccinCreateWithoutRendezVousInput, VaccinUncheckedCreateWithoutRendezVousInput>
    where?: VaccinWhereInput
  }

  export type VaccinUpdateToOneWithWhereWithoutRendezVousInput = {
    where?: VaccinWhereInput
    data: XOR<VaccinUpdateWithoutRendezVousInput, VaccinUncheckedUpdateWithoutRendezVousInput>
  }

  export type VaccinUpdateWithoutRendezVousInput = {
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    enfant?: EnfantUpdateOneRequiredWithoutVaccinsNestedInput
  }

  export type VaccinUncheckedUpdateWithoutRendezVousInput = {
    idV?: IntFieldUpdateOperationsInput | number
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    Enfant_idE?: IntFieldUpdateOperationsInput | number
  }

  export type ParentCreateManyUserInput = {
    idP?: number
    nomP?: string | null
    prenomP?: string | null
    numTelP?: string | null
    roleP?: string | null
    sexeP: string
  }

  export type PersonnelMedicalCreateManyUserInput = {
    idPM?: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
    CentreVax_idC: number
  }

  export type ParentUpdateWithoutUserInput = {
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    enfants?: EnfantUpdateManyWithoutParentNestedInput
    rendezVous?: RendezVousUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateWithoutUserInput = {
    idP?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
    enfants?: EnfantUncheckedUpdateManyWithoutParentNestedInput
    rendezVous?: RendezVousUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateManyWithoutUserInput = {
    idP?: IntFieldUpdateOperationsInput | number
    nomP?: NullableStringFieldUpdateOperationsInput | string | null
    prenomP?: NullableStringFieldUpdateOperationsInput | string | null
    numTelP?: NullableStringFieldUpdateOperationsInput | string | null
    roleP?: NullableStringFieldUpdateOperationsInput | string | null
    sexeP?: StringFieldUpdateOperationsInput | string
  }

  export type PersonnelMedicalUpdateWithoutUserInput = {
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    CentreVax?: CentreVaxUpdateOneRequiredWithoutPersonnelsMedicalNestedInput
  }

  export type PersonnelMedicalUncheckedUpdateWithoutUserInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
  }

  export type PersonnelMedicalUncheckedUpdateManyWithoutUserInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
  }

  export type EnfantCreateManyParentInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    centreSante_idC: number
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
  }

  export type RendezVousCreateManyParentInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Vaccin_idV: number
  }

  export type EnfantUpdateWithoutParentInput = {
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    centreSante?: CentreVaxUpdateOneRequiredWithoutEnfantsNestedInput
    vaccins?: VaccinUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantUncheckedUpdateWithoutParentInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    centreSante_idC?: IntFieldUpdateOperationsInput | number
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    vaccins?: VaccinUncheckedUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantUncheckedUpdateManyWithoutParentInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    centreSante_idC?: IntFieldUpdateOperationsInput | number
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RendezVousUpdateWithoutParentInput = {
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax?: CentreVaxUpdateOneRequiredWithoutRendezVousNestedInput
    Vaccin?: VaccinUpdateOneRequiredWithoutRendezVousNestedInput
  }

  export type RendezVousUncheckedUpdateWithoutParentInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousUncheckedUpdateManyWithoutParentInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type PersonnelMedicalCreateManyCentreVaxInput = {
    idPM?: number
    user_id: number
    emailPM?: string | null
    nomPM?: string | null
    prenomPM?: string | null
    numTelPM?: number | null
    rolePM?: string | null
  }

  export type EnfantCreateManyCentreSanteInput = {
    idE?: number
    nomCompletE: string
    dateNaiss?: Date | string | null
    adresseE?: string | null
    numSMI: string
    sexe: string
    allergies?: string | null
    groupeSang?: string | null
    infoMedicaux?: string | null
    province?: string | null
    ville?: string | null
    Parent_idP: number
  }

  export type RendezVousCreateManyCentreVaxInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    Parent_idP: number
    Vaccin_idV: number
  }

  export type PersonnelMedicalUpdateWithoutCentreVaxInput = {
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPersonnelsMedicalNestedInput
  }

  export type PersonnelMedicalUncheckedUpdateWithoutCentreVaxInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonnelMedicalUncheckedUpdateManyWithoutCentreVaxInput = {
    idPM?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    emailPM?: NullableStringFieldUpdateOperationsInput | string | null
    nomPM?: NullableStringFieldUpdateOperationsInput | string | null
    prenomPM?: NullableStringFieldUpdateOperationsInput | string | null
    numTelPM?: NullableIntFieldUpdateOperationsInput | number | null
    rolePM?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnfantUpdateWithoutCentreSanteInput = {
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent?: ParentUpdateOneRequiredWithoutEnfantsNestedInput
    vaccins?: VaccinUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantUncheckedUpdateWithoutCentreSanteInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent_idP?: IntFieldUpdateOperationsInput | number
    vaccins?: VaccinUncheckedUpdateManyWithoutEnfantNestedInput
  }

  export type EnfantUncheckedUpdateManyWithoutCentreSanteInput = {
    idE?: IntFieldUpdateOperationsInput | number
    nomCompletE?: StringFieldUpdateOperationsInput | string
    dateNaiss?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresseE?: NullableStringFieldUpdateOperationsInput | string | null
    numSMI?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSang?: NullableStringFieldUpdateOperationsInput | string | null
    infoMedicaux?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    Parent_idP?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousUpdateWithoutCentreVaxInput = {
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    Parent?: ParentUpdateOneRequiredWithoutRendezVousNestedInput
    Vaccin?: VaccinUpdateOneRequiredWithoutRendezVousNestedInput
  }

  export type RendezVousUncheckedUpdateWithoutCentreVaxInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    Parent_idP?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousUncheckedUpdateManyWithoutCentreVaxInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    Parent_idP?: IntFieldUpdateOperationsInput | number
    Vaccin_idV?: IntFieldUpdateOperationsInput | number
  }

  export type VaccinCreateManyEnfantInput = {
    idV?: number
    nomV: string
    descr?: string | null
    EffetSecondaire?: string | null
    ageRecommande?: number | null
    doseV?: string | null
    abreviationV?: string | null
    maladieEvitable?: string | null
  }

  export type VaccinUpdateWithoutEnfantInput = {
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    rendezVous?: RendezVousUpdateManyWithoutVaccinNestedInput
  }

  export type VaccinUncheckedUpdateWithoutEnfantInput = {
    idV?: IntFieldUpdateOperationsInput | number
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
    rendezVous?: RendezVousUncheckedUpdateManyWithoutVaccinNestedInput
  }

  export type VaccinUncheckedUpdateManyWithoutEnfantInput = {
    idV?: IntFieldUpdateOperationsInput | number
    nomV?: StringFieldUpdateOperationsInput | string
    descr?: NullableStringFieldUpdateOperationsInput | string | null
    EffetSecondaire?: NullableStringFieldUpdateOperationsInput | string | null
    ageRecommande?: NullableIntFieldUpdateOperationsInput | number | null
    doseV?: NullableStringFieldUpdateOperationsInput | string | null
    abreviationV?: NullableStringFieldUpdateOperationsInput | string | null
    maladieEvitable?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RendezVousCreateManyVaccinInput = {
    idR?: number
    dateR?: Date | string | null
    statusR: string
    CentreVax_idC: number
    Parent_idP: number
  }

  export type RendezVousUpdateWithoutVaccinInput = {
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax?: CentreVaxUpdateOneRequiredWithoutRendezVousNestedInput
    Parent?: ParentUpdateOneRequiredWithoutRendezVousNestedInput
  }

  export type RendezVousUncheckedUpdateWithoutVaccinInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Parent_idP?: IntFieldUpdateOperationsInput | number
  }

  export type RendezVousUncheckedUpdateManyWithoutVaccinInput = {
    idR?: IntFieldUpdateOperationsInput | number
    dateR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusR?: StringFieldUpdateOperationsInput | string
    CentreVax_idC?: IntFieldUpdateOperationsInput | number
    Parent_idP?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentCountOutputTypeDefaultArgs instead
     */
    export type ParentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CentreVaxCountOutputTypeDefaultArgs instead
     */
    export type CentreVaxCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CentreVaxCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnfantCountOutputTypeDefaultArgs instead
     */
    export type EnfantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnfantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VaccinCountOutputTypeDefaultArgs instead
     */
    export type VaccinCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VaccinCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentDefaultArgs instead
     */
    export type ParentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CentreVaxDefaultArgs instead
     */
    export type CentreVaxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CentreVaxDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonnelMedicalDefaultArgs instead
     */
    export type PersonnelMedicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonnelMedicalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnfantDefaultArgs instead
     */
    export type EnfantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnfantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VaccinDefaultArgs instead
     */
    export type VaccinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VaccinDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RendezVousDefaultArgs instead
     */
    export type RendezVousArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RendezVousDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}